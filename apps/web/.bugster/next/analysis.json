{
  "metadata": {
    "timestamp": 1759448385.3621051,
    "git": {
      "branch": "main",
      "commit": "a1ac5f36f0a34a080cee618e007831215f84e95b"
    }
  },
  "data": {
    "framework": {
      "id": "next",
      "name": "Next.js",
      "dir_path": "/Users/nacho/Bugster/benchmarks/next/cal.com/apps/web/"
    },
    "router_type": "pages",
    "stats": {
      "fileCount": 824,
      "routeCount": 159,
      "apiRouteCount": 249,
      "layoutCount": 8
    },
    "layouts": [
      {
        "name": "async",
        "relative_file_path": "app/(use-page-wrapper)/settings/platform/members/layout.tsx",
        "relative_dir_path": "app/(use-page-wrapper)/settings/platform/members",
        "content": "import { getTranslate } from \"app/_utils\";\n\nimport { CTA_CONTAINER_CLASS_NAME } from \"@calcom/features/data-table/lib/utils\";\nimport Shell from \"@calcom/features/shell/Shell\";\nimport { Button } from \"@calcom/ui/components/button\";\n\nexport default async function Layout({ children }: { children: React.ReactNode }) {\n  const t = await getTranslate();\n\n  return (\n    <Shell\n      heading={\n        <div className=\"flex\">\n          <h1>Member management</h1>\n          <Button\n            tooltip=\"Only teammates invited as admins can create OAuth clients while teammates invited as members have read only access\"\n            tooltipSide=\"right\"\n            className=\"mx-2 hover:bg-transparent\"\n            color=\"minimal\"\n            variant=\"icon\"\n            StartIcon=\"info\"\n          />\n        </div>\n      }\n      title={t(\"platform_members\")}\n      subtitle={t(\"platform_members_description\")}\n      withoutMain={false}\n      isPlatformUser={true}\n      actions={<div className={CTA_CONTAINER_CLASS_NAME} />}>\n      {children}\n    </Shell>\n  );\n}\n",
        "components": ["Layout", "Shell", "Button"]
      },
      {
        "name": "Layout",
        "relative_file_path": "app/(use-page-wrapper)/workflows/layout.tsx",
        "relative_dir_path": "app/(use-page-wrapper)/workflows",
        "content": "import { _generateMetadata } from \"app/_utils\";\nimport type { ReactNode } from \"react\";\n\nexport const generateMetadata = async () =>\n  await _generateMetadata(\n    (t) => t(\"workflows\"),\n    (t) => t(\"workflows_to_automate_notifications\")\n  );\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <>{children}</>;\n}\n",
        "components": ["Layout"]
      },
      {
        "name": "TroubleshooterLayout",
        "relative_file_path": "app/(use-page-wrapper)/availability/troubleshoot/layout.tsx",
        "relative_dir_path": "app/(use-page-wrapper)/availability/troubleshoot",
        "content": "\"use client\";\n\nimport React, { Suspense } from \"react\";\n\nimport { ErrorBoundary } from \"@calcom/ui/components/errorBoundary\";\nimport { Icon } from \"@calcom/ui/components/icon\";\n\nexport default function TroubleshooterLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <div className=\"flex flex-1 [&>*]:flex-1\">\n        <ErrorBoundary>\n          <Suspense fallback={<Icon name=\"loader\" />}>{children}</Suspense>\n        </ErrorBoundary>\n      </div>\n    </>\n  );\n}\n",
        "components": ["TroubleshooterLayout", "ErrorBoundary", "Suspense", "Icon"]
      },
      {
        "name": "PlaygroundLayout",
        "relative_file_path": "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/layout.tsx",
        "relative_dir_path": "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground",
        "content": "\"use client\";\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\nexport default function PlaygroundLayout({ children }: { children: React.ReactNode }) {\n  const pathname = usePathname();\n\n  const isPlaygroundRoot = pathname === \"/settings/admin/playground\";\n\n  return isPlaygroundRoot ? (\n    children\n  ) : (\n    <div>\n      <Link href=\"/settings/admin/playground\" className=\"text-sm underline\">\n        \u2190 Playground\n      </Link>\n      <div className=\"h-8\" />\n      <div>{children}</div>\n    </div>\n  );\n}\n",
        "components": ["PlaygroundLayout", "Link"]
      },
      {
        "name": "OrgAdminOnlyLayout",
        "relative_file_path": "app/(use-page-wrapper)/settings/organizations/(org-admin-only)/layout.tsx",
        "relative_dir_path": "app/(use-page-wrapper)/settings/organizations/(org-admin-only)",
        "content": "import { cookies, headers } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\n\nimport { checkAdminOrOwner } from \"@calcom/features/auth/lib/checkAdminOrOwner\";\nimport { getServerSession } from \"@calcom/features/auth/lib/getServerSession\";\n\nimport { buildLegacyRequest } from \"@lib/buildLegacyCtx\";\n\nconst OrgAdminOnlyLayout = async ({ children }: { children: React.ReactNode }) => {\n  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n  const userProfile = session?.user?.profile;\n  const userId = session?.user?.id;\n  const orgRole =\n    session?.user?.org?.role ??\n    userProfile?.organization?.members.find((m: { userId: number }) => m.userId === userId)?.role;\n  const isOrgAdminOrOwner = checkAdminOrOwner(orgRole);\n\n  if (!isOrgAdminOrOwner) {\n    return redirect(\"/settings/organizations/profile\");\n  }\n\n  return children;\n};\n\nexport default OrgAdminOnlyLayout;\n",
        "components": []
      },
      {
        "name": "SettingsOrganizationsLayout",
        "relative_file_path": "app/(use-page-wrapper)/settings/organizations/(org-user-only)/layout.tsx",
        "relative_dir_path": "app/(use-page-wrapper)/settings/organizations/(org-user-only)",
        "content": "import { cookies, headers } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\n\nimport { getServerSession } from \"@calcom/features/auth/lib/getServerSession\";\n\nimport { buildLegacyRequest } from \"@lib/buildLegacyCtx\";\n\nconst SettingsOrganizationsLayout = async ({ children }: { children: React.ReactNode }) => {\n  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n  const orgExists =\n    session?.user?.org || session?.user?.profile?.organizationId || session?.user?.profile?.organization;\n  if (!orgExists) {\n    return redirect(\"/settings/my-account/profile\");\n  }\n\n  return children;\n};\n\nexport default SettingsOrganizationsLayout;\n",
        "components": []
      },
      {
        "name": "RootLayout",
        "relative_file_path": "app/layout.tsx",
        "relative_dir_path": "app",
        "content": "import { dir } from \"i18next\";\nimport { Inter } from \"next/font/google\";\nimport localFont from \"next/font/local\";\nimport { headers, cookies } from \"next/headers\";\nimport React from \"react\";\n\nimport { getLocale } from \"@calcom/features/auth/lib/getLocale\";\nimport { loadTranslations } from \"@calcom/lib/server/i18n\";\nimport { IconSprites } from \"@calcom/ui/components/icon\";\n\nimport { buildLegacyRequest } from \"@lib/buildLegacyCtx\";\n\nimport \"../styles/globals.css\";\nimport { AppRouterI18nProvider } from \"./AppRouterI18nProvider\";\nimport { SpeculationRules } from \"./SpeculationRules\";\nimport { Providers } from \"./providers\";\n\nconst interFont = Inter({ subsets: [\"latin\"], variable: \"--font-inter\", preload: true, display: \"swap\" });\nconst calFont = localFont({\n  src: \"../fonts/CalSans-SemiBold.woff2\",\n  variable: \"--font-cal\",\n  preload: true,\n  display: \"block\",\n  weight: \"600\",\n});\n\nexport const viewport = {\n  width: \"device-width\",\n  initialScale: 1.0,\n  maximumScale: 1.0,\n  userScalable: false,\n  viewportFit: \"cover\",\n  themeColor: [\n    {\n      media: \"(prefers-color-scheme: light)\",\n      color: \"#f9fafb\",\n    },\n    {\n      media: \"(prefers-color-scheme: dark)\",\n      color: \"#1C1C1C\",\n    },\n  ],\n};\n\nexport const metadata = {\n  icons: {\n    icon: \"/favicon.ico\",\n    apple: \"/api/logo?type=apple-touch-icon\",\n    other: [\n      {\n        rel: \"icon-mask\",\n        url: \"/safari-pinned-tab.svg\",\n        color: \"#000000\",\n      },\n      {\n        url: \"/api/logo?type=favicon-16\",\n        sizes: \"16x16\",\n        type: \"image/png\",\n      },\n      {\n        url: \"/api/logo?type=favicon-32\",\n        sizes: \"32x32\",\n        type: \"image/png\",\n      },\n    ],\n  },\n  manifest: \"/site.webmanifest\",\n  other: {\n    \"application-TileColor\": \"#ff0000\",\n  },\n  twitter: {\n    site: \"@calcom\",\n    creator: \"@calcom\",\n    card: \"summary_large_image\",\n  },\n  robots: {\n    index: true,\n    follow: true,\n  },\n};\n\nconst getInitialProps = async () => {\n  const h = await headers();\n  const isEmbed = h.get(\"x-isEmbed\") === \"true\";\n  const embedColorScheme = h.get(\"x-embedColorScheme\");\n  const newLocale = (await getLocale(buildLegacyRequest(await headers(), await cookies()))) ?? \"en\";\n  const direction = dir(newLocale) ?? \"ltr\";\n\n  return {\n    isEmbed,\n    embedColorScheme,\n    locale: newLocale,\n    direction,\n  };\n};\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const h = await headers();\n  const nonce = h.get(\"x-csp-nonce\") ?? \"\";\n\n  const { locale, direction, isEmbed, embedColorScheme } = await getInitialProps();\n\n  const ns = \"common\";\n  const translations = await loadTranslations(locale, ns);\n\n  return (\n    <html\n      className=\"notranslate\"\n      translate=\"no\"\n      lang={locale}\n      dir={direction}\n      style={embedColorScheme ? { colorScheme: embedColorScheme as string } : undefined}\n      suppressHydrationWarning\n      data-nextjs-router=\"app\">\n      <head nonce={nonce}>\n        <style>{`\n          :root {\n            --font-inter: ${interFont.style.fontFamily.replace(/\\'/g, \"\")};\n            --font-cal: ${calFont.style.fontFamily.replace(/\\'/g, \"\")};\n          }\n        `}</style>\n      </head>\n      <body\n        className=\"dark:bg-default bg-subtle antialiased\"\n        style={\n          isEmbed\n            ? {\n                background: \"transparent\",\n                // Keep the embed hidden till parent initializes and\n                // - gives it the appropriate styles if UI instruction is there.\n                // - gives iframe the appropriate height(equal to document height) which can only be known after loading the page once in browser.\n                // - Tells iframe which mode it should be in (dark/light) - if there is a a UI instruction for that\n                visibility: \"hidden\",\n              }\n            : {\n                visibility: \"visible\",\n              }\n        }>\n        <IconSprites />\n        <SpeculationRules\n          // URLs In Navigation\n          prerenderPathsOnHover={[\n            \"/event-types\",\n            \"/availability\",\n            \"/bookings/upcoming\",\n            \"/teams\",\n            \"/apps\",\n            \"/apps/routing-forms/forms\",\n            \"/workflows\",\n            \"/insights\",\n          ]}\n        />\n\n        <Providers isEmbed={isEmbed} nonce={nonce}>\n          <AppRouterI18nProvider translations={translations} locale={locale} ns={ns}>\n            {children}\n          </AppRouterI18nProvider>\n        </Providers>\n      </body>\n    </html>\n  );\n}\n",
        "components": ["RootLayout", "IconSprites", "SpeculationRules", "Providers", "AppRouterI18nProvider"]
      },
      {
        "name": "PagesAppLayout",
        "relative_file_path": "pages/_app.tsx",
        "relative_dir_path": "pages",
        "content": "import type { IncomingMessage } from \"http\";\nimport type { NextPageContext } from \"next\";\nimport { SessionProvider } from \"next-auth/react\";\nimport React from \"react\";\nimport CacheProvider from \"react-inlinesvg/provider\";\n\nimport { WebPushProvider } from \"@calcom/features/notifications/WebPushContext\";\nimport { trpc } from \"@calcom/trpc/react\";\n\nimport type { AppProps } from \"@lib/app-providers\";\n\nimport \"../styles/globals.css\";\n\nfunction MyApp(props: AppProps) {\n  const { Component, pageProps } = props;\n\n  return (\n    <SessionProvider session={pageProps.session ?? undefined}>\n      <WebPushProvider>\n        {/* @ts-expect-error FIXME remove this comment when upgrading typescript to v5 */}\n        <CacheProvider>\n          {Component.PageWrapper ? <Component.PageWrapper {...props} /> : <Component {...pageProps} />}\n        </CacheProvider>\n      </WebPushProvider>\n    </SessionProvider>\n  );\n}\n\ndeclare global {\n  interface Window {\n    calNewLocale: string;\n  }\n}\n\nMyApp.getInitialProps = async ({ ctx }: { ctx: NextPageContext }) => {\n  const { req } = ctx;\n\n  let newLocale = \"en\";\n\n  if (req) {\n    const { getLocale } = await import(\"@calcom/features/auth/lib/getLocale\");\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newLocale = await getLocale(req as IncomingMessage & { cookies: Record<string, any> });\n  } else if (typeof window !== \"undefined\" && window.calNewLocale) {\n    newLocale = window.calNewLocale;\n  }\n\n  return {\n    pageProps: {\n      newLocale,\n    },\n  };\n};\n\nconst WrappedMyApp = trpc.withTRPC(MyApp);\n\nexport default WrappedMyApp;\n",
        "components": ["MyApp", "SessionProvider", "WebPushProvider", "CacheProvider", "Component"]
      }
    ],
    "routes": [
      {
        "routePath": "/(booking-page-wrapper)/:user/:type/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/[user]/[type]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "TypePage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/:user/:type",
        "relativeFilePath": "app/(booking-page-wrapper)/[user]/[type]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/:user/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/[user]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "User"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/:user",
        "relativeFilePath": "app/(booking-page-wrapper)/[user]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/booking/:uid/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/booking/[uid]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "OldPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/booking/:uid",
        "relativeFilePath": "app/(booking-page-wrapper)/booking/[uid]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "OldPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/booking/dry-run-successful",
        "relativeFilePath": "app/(booking-page-wrapper)/booking/dry-run-successful/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "BookingDryRunSuccessView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/d/:link/:slug",
        "relativeFilePath": "app/(booking-page-wrapper)/d/[link]/[slug]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Type"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/:user/:type/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/[user]/[type]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "TeamTypePage", "UserTypePage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/:user/:type",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/[user]/[type]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "TeamTypePage", "UserTypePage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/:user/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/[user]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "TeamPage", "UserPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/:user",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/[user]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "TeamPage", "UserPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/instant-meeting/team/:slug/:type",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/instant-meeting/team/[slug]/[type]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Page"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/team/:slug/:type",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/team/[slug]/[type]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/org/:orgSlug/team/:slug",
        "relativeFilePath": "app/(booking-page-wrapper)/org/[orgSlug]/team/[slug]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/team/:slug/:type/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/team/[slug]/[type]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "TypePage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/team/:slug/:type",
        "relativeFilePath": "app/(booking-page-wrapper)/team/[slug]/[type]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "CustomI18nProvider", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/team/:slug/embed",
        "relativeFilePath": "app/(booking-page-wrapper)/team/[slug]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "TeamPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(booking-page-wrapper)/team/:slug",
        "relativeFilePath": "app/(booking-page-wrapper)/team/[slug]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/(main-nav)/availability",
        "relativeFilePath": "app/(use-page-wrapper)/(main-nav)/availability/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [
          "Page",
          "ShellMainAppDir",
          "AvailabilityCTA",
          "AvailabilitySliderTable",
          "AvailabilityList"
        ],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/(main-nav)/bookings/:status",
        "relativeFilePath": "app/(use-page-wrapper)/(main-nav)/bookings/[status]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "ShellMainAppDir", "BookingsList"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/(main-nav)/event-types",
        "relativeFilePath": "app/(use-page-wrapper)/(main-nav)/event-types/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "ShellMainAppDir", "EventTypesCTA", "EventTypes"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/(main-nav)/teams",
        "relativeFilePath": "app/(use-page-wrapper)/(main-nav)/teams/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "ShellMainAppDir"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/(homepage)",
        "relativeFilePath": "app/(use-page-wrapper)/apps/(homepage)/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "AppsPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/:slug",
        "relativeFilePath": "app/(use-page-wrapper)/apps/[slug]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "AppView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/:slug/setup",
        "relativeFilePath": "app/(use-page-wrapper)/apps/[slug]/setup/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "SetupView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/categories/:category",
        "relativeFilePath": "app/(use-page-wrapper)/apps/categories/[category]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "CategoryPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/categories",
        "relativeFilePath": "app/(use-page-wrapper)/apps/categories/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Page"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/installation/:[...step]",
        "relativeFilePath": "app/(use-page-wrapper)/apps/installation/[[...step]]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Page"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/installed/:category",
        "relativeFilePath": "app/(use-page-wrapper)/apps/installed/[category]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["InstalledAppsWrapper", "InstalledApps"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/routing-forms/:...pages",
        "relativeFilePath": "app/(use-page-wrapper)/apps/routing-forms/[...pages]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Component"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/apps/routing-forms/forms/:[...pages]",
        "relativeFilePath": "app/(use-page-wrapper)/apps/routing-forms/forms/[[...pages]]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Forms"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/error",
        "relativeFilePath": "app/(use-page-wrapper)/auth/error/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "AuthContainer", "Icon", "Link", "Button"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/forgot-password/:id",
        "relativeFilePath": "app/(use-page-wrapper)/auth/forgot-password/[id]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "SetNewUserPassword"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/forgot-password",
        "relativeFilePath": "app/(use-page-wrapper)/auth/forgot-password/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "ForgotPassword"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/login",
        "relativeFilePath": "app/(use-page-wrapper)/auth/login/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Login"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/logout",
        "relativeFilePath": "app/(use-page-wrapper)/auth/logout/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "Logout"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/oauth2/authorize",
        "relativeFilePath": "app/(use-page-wrapper)/auth/oauth2/authorize/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "Page"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/platform/authorize",
        "relativeFilePath": "app/(use-page-wrapper)/auth/platform/authorize/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Page"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/saml-idp",
        "relativeFilePath": "app/(use-page-wrapper)/auth/saml-idp/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["SamlIdpPage", "SamlIdpClient"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/setup",
        "relativeFilePath": "app/(use-page-wrapper)/auth/setup/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Setup"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/signin",
        "relativeFilePath": "app/(use-page-wrapper)/auth/signin/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "SignIn"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/sso/:provider",
        "relativeFilePath": "app/(use-page-wrapper)/auth/sso/[provider]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "SSOProviderView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/sso/direct",
        "relativeFilePath": "app/(use-page-wrapper)/auth/sso/direct/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "SSODirectView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/verify-email-change",
        "relativeFilePath": "app/(use-page-wrapper)/auth/verify-email-change/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "VerifyEmailChange"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/verify-email",
        "relativeFilePath": "app/(use-page-wrapper)/auth/verify-email/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "VerifyEmailPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/auth/verify",
        "relativeFilePath": "app/(use-page-wrapper)/auth/verify/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "VerifyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/availability/:schedule",
        "relativeFilePath": "app/(use-page-wrapper)/availability/[schedule]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "AvailabilitySettingsWebWrapper"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/availability/troubleshoot",
        "relativeFilePath": "app/(use-page-wrapper)/availability/troubleshoot/page.tsx",
        "layoutChain": ["TroubleshooterLayout", "RootLayout"],
        "components": ["ServerPage", "Troubleshoot"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/connect-and-join",
        "relativeFilePath": "app/(use-page-wrapper)/connect-and-join/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LicenseRequired", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/enterprise",
        "relativeFilePath": "app/(use-page-wrapper)/enterprise/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "EnterprisePage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/event-types/:type",
        "relativeFilePath": "app/(use-page-wrapper)/event-types/[type]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "EventTypeWebWrapper"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/getting-started/:[...step]",
        "relativeFilePath": "app/(use-page-wrapper)/getting-started/[[...step]]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Page"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/insights/call-history",
        "relativeFilePath": "app/(use-page-wrapper)/insights/call-history/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "InsightsCallHistoryPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/insights",
        "relativeFilePath": "app/(use-page-wrapper)/insights/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "InsightsPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/insights/router-position",
        "relativeFilePath": "app/(use-page-wrapper)/insights/router-position/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "InsightsVirtualQueuesPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/insights/routing",
        "relativeFilePath": "app/(use-page-wrapper)/insights/routing/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "InsightsRoutingPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/maintenance",
        "relativeFilePath": "app/(use-page-wrapper)/maintenance/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/more",
        "relativeFilePath": "app/(use-page-wrapper)/more/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "Page"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/payment/:uid",
        "relativeFilePath": "app/(use-page-wrapper)/payment/[uid]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "PaymentPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/refer",
        "relativeFilePath": "app/(use-page-wrapper)/refer/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ReferralsPage", "Shell", "DubReferralsPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/apps/:category",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/apps/[category]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "AdminAppsList"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/flags",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/flags/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "FlagListingView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/impersonation",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/impersonation/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "ImpersonationView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/lockedSMS",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/lockedSMS/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LockedSMSView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/oAuth",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/oAuth/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/organizations/:id/edit",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/organizations/[id]/edit/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LicenseRequired", "OrgForm"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/organizations",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/organizations/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LicenseRequired", "AdminOrgTable"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/playground/bookings-by-hour",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/bookings-by-hour/page.tsx",
        "layoutChain": ["PlaygroundLayout", "RootLayout"],
        "components": ["BookingsByHourPlayground", "ChartCard", "BookingsByHourChartContent"],
        "hasParams": false,
        "hasForm": false,
        "hooks": ["useLocale"],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/playground",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/page.tsx",
        "layoutChain": ["PlaygroundLayout", "RootLayout"],
        "components": ["Page", "Link"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/playground/routing-funnel",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/routing-funnel/page.tsx",
        "layoutChain": ["PlaygroundLayout", "RootLayout"],
        "components": ["RoutingFunnelPlayground", "ChartCard", "RoutingFunnelContent"],
        "hasParams": false,
        "hasForm": false,
        "hooks": ["useLocale"],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/users/:id/edit",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/users/[id]/edit/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LicenseRequired", "UsersEditView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/users/add",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/users/add/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "UsersAddView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/users",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/users/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "Button", "UsersListingView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(admin-layout)/admin/workspace-platforms",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(admin-layout)/admin/workspace-platforms/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LicenseRequired", "WorkspacePlatformsPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/billing",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/billing/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "BillingView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/developer/api-keys",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/developer/api-keys/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "ApiKeysView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/(with-loader)",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/(with-loader)/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["WebhooksViewServerWrapper", "WebhooksView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/:id",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/[id]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "EditWebhookView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/new",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/new/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "NewWebhookView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/my-account/appearance",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/my-account/appearance/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "AppearancePage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/my-account/calendars",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/my-account/calendars/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "CalendarListContainer"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/my-account/conferencing",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/my-account/conferencing/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "ConferencingAppsViewWebWrapper"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/my-account/general",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/my-account/general/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "GeneralView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/my-account/out-of-office",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/my-account/out-of-office/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "OutOfOfficeEntriesList"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/my-account/profile",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/my-account/profile/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "ProfileView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/my-account/push-notifications",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/my-account/push-notifications/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "PushNotificationsView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/:id/edit",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/[id]/edit/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["OrgAttributesEditPageWrapper", "OrgAttributesEditPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/create",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/create/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["OrgAttributesCreatePageWrapper", "OrgAttributesCreatePage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "OrgSettingsAttributesPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/billing",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/billing/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "BillingView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/delegation-credential",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/delegation-credential/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "DelegationCredentialList"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/dsync",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/dsync/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "DirectorySyncTeamView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/privacy",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/privacy/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "PrivacyView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/sso",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/sso/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "OrgSSOView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/admin-api",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/admin-api/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "AdminAPIView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/general",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/general/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/profile",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/profile/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/roles",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "CreateRoleCTA", "RolesList"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/(main-page)",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/(main-page)/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "OtherTeamsListing"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/:id/appearance",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/[id]/appearance/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/:id/members",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/[id]/members/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "TeamMembersCTA", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/:id/profile",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/[id]/profile/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/security/impersonation",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/security/impersonation/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "ProfileImpersonationViewWrapper"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/security/password",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/security/password/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "PasswordViewWrapper"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/security/sso",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/security/sso/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "SAMLSSO"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/security/two-factor-auth",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/security/two-factor-auth/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "TwoFactorAuthView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/teams/:id/appearance",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/appearance/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/teams/:id/billing",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/billing/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/teams/:id/members",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/members/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "TeamMembersView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/teams/:id/profile",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/profile/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/teams/:id/roles",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/roles/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "CreateRoleCTA", "RolesList"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/(settings-layout)/teams/:id/settings",
        "relativeFilePath": "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/settings/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["Page", "SettingsHeader", "TeamSettingsView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/license-key/new",
        "relativeFilePath": "app/(use-page-wrapper)/settings/license-key/new/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "CreateANewLicenseKeyForm"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/(org-admin-only)/appearance",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/(org-admin-only)/appearance/page.tsx",
        "layoutChain": ["OrgAdminOnlyLayout", "RootLayout"],
        "components": ["ServerPageWrapper", "Page"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/(org-user-only)/:id/members",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/(org-user-only)/[id]/members/page.tsx",
        "layoutChain": ["SettingsOrganizationsLayout", "RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/(org-user-only)/members",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/(org-user-only)/members/page.tsx",
        "layoutChain": ["SettingsOrganizationsLayout", "RootLayout"],
        "components": ["Page", "MembersView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/new/about",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/new/about/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/new/add-teams",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/new/add-teams/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/new/handover",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/new/handover/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/new/onboard-members",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/new/onboard-members/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/new",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/new/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "LicenseRequired", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/organizations/new/status",
        "relativeFilePath": "app/(use-page-wrapper)/settings/organizations/new/status/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/billing",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/billing/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "PlatformBillingUpgrade"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/managed-users",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/managed-users/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "ManagedUsersView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/members",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/members/page.tsx",
        "layoutChain": ["async", "RootLayout"],
        "components": ["ServerPageWrapper", "PlatformMembersView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/new",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/new/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "LicenseRequired", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/oauth-clients/:clientId/edit",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/oauth-clients/[clientId]/edit/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "EditView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/oauth-clients/:clientId/edit/webhooks",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/oauth-clients/[clientId]/edit/webhooks/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "EditWebhooksView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/oauth-clients/create",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/oauth-clients/create/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "CreateNewView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "PlatformView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/platform/plans",
        "relativeFilePath": "app/(use-page-wrapper)/settings/platform/plans/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPageWrapper", "PlatformPlansView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/teams/:id/event-type",
        "relativeFilePath": "app/(use-page-wrapper)/settings/teams/[id]/event-type/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "CreateTeamEventType"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/teams/:id/onboard-members",
        "relativeFilePath": "app/(use-page-wrapper)/settings/teams/[id]/onboard-members/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "AddNewTeamMembers"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/settings/teams/new",
        "relativeFilePath": "app/(use-page-wrapper)/settings/teams/new/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LayoutWrapper", "CreateNewTeamView"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/signup",
        "relativeFilePath": "app/(use-page-wrapper)/signup/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "Signup"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/upgrade",
        "relativeFilePath": "app/(use-page-wrapper)/upgrade/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/video/:uid",
        "relativeFilePath": "app/(use-page-wrapper)/video/[uid]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "VideosSingleView"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/video/meeting-ended/:uid",
        "relativeFilePath": "app/(use-page-wrapper)/video/meeting-ended/[uid]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "MeetingEnded"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/video/meeting-not-started/:uid",
        "relativeFilePath": "app/(use-page-wrapper)/video/meeting-not-started/[uid]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "MeetingNotStarted"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/video/no-meeting-found",
        "relativeFilePath": "app/(use-page-wrapper)/video/no-meeting-found/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["ServerPage", "NoMeetingFound"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/workflow/new",
        "relativeFilePath": "app/(use-page-wrapper)/workflow/new/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/workflows/:workflow",
        "relativeFilePath": "app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
        "layoutChain": ["Layout", "RootLayout"],
        "components": ["Page", "LegacyPage"],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/(use-page-wrapper)/workflows",
        "relativeFilePath": "app/(use-page-wrapper)/workflows/page.tsx",
        "layoutChain": ["Layout", "RootLayout"],
        "components": ["Page", "LegacyPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/icons",
        "relativeFilePath": "app/icons/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": ["IconsPage", "IconSprites", "IconGrid"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/",
        "relativeFilePath": "app/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/reschedule/:uid/embed",
        "relativeFilePath": "app/reschedule/[uid]/embed/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/reschedule/:uid",
        "relativeFilePath": "app/reschedule/[uid]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/routing-forms/:...pages",
        "relativeFilePath": "app/routing-forms/[...pages]/page.tsx",
        "layoutChain": ["RootLayout"],
        "components": [],
        "hasParams": true,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "lib/pages/auth/verify-email",
        "relativeFilePath": "lib/pages/auth/verify-email.ts",
        "layoutChain": [],
        "components": [],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "lib/pages/document/_applyThemeForDocument",
        "relativeFilePath": "lib/pages/document/_applyThemeForDocument.ts",
        "layoutChain": [],
        "components": [],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": ["onReady"],
        "featureFlags": []
      },
      {
        "routePath": "/_app",
        "relativeFilePath": "pages/_app.tsx",
        "layoutChain": ["PagesAppLayout"],
        "components": ["MyApp", "SessionProvider", "WebPushProvider", "CacheProvider", "Component"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/_document",
        "relativeFilePath": "pages/_document.tsx",
        "layoutChain": ["PagesAppLayout"],
        "components": ["Html", "Head", "Main", "NextScript"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/_error",
        "relativeFilePath": "pages/_error.tsx",
        "layoutChain": ["PagesAppLayout"],
        "components": ["CustomError", "ErrorPage"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/router/embed",
        "relativeFilePath": "pages/router/embed.tsx",
        "layoutChain": ["PagesAppLayout"],
        "components": [],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      },
      {
        "routePath": "/router",
        "relativeFilePath": "pages/router/index.tsx",
        "layoutChain": ["PagesAppLayout"],
        "components": ["Router", "Head"],
        "hasParams": false,
        "hasForm": false,
        "hooks": [],
        "eventHandlers": [],
        "featureFlags": []
      }
    ],
    "api_routes": [
      {
        "routePath": "/api/auth/forgot-password",
        "relativeFilePath": "app/api/auth/forgot-password/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "NextResponse",
          "passwordResetRequest",
          "checkRateLimitAndThrowError",
          "emailSchema",
          "prisma",
          "piiHasher"
        ]
      },
      {
        "routePath": "/api/auth/oauth/me",
        "relativeFilePath": "app/api/auth/oauth/me/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "isAuthorized"]
      },
      {
        "routePath": "/api/auth/oauth/refreshToken",
        "relativeFilePath": "app/api/auth/oauth/refreshToken/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseUrlFormData",
          "jwt",
          "NextResponse",
          "prisma",
          "generateSecret"
        ]
      },
      {
        "routePath": "/api/auth/oauth/token",
        "relativeFilePath": "app/api/auth/oauth/token/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseUrlFormData",
          "jwt",
          "NextResponse",
          "prisma",
          "generateSecret"
        ]
      },
      {
        "routePath": "/api/auth/oidc",
        "relativeFilePath": "app/api/auth/oidc/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "jackson", "HttpError", "logger"]
      },
      {
        "routePath": "/api/auth/reset-password",
        "relativeFilePath": "app/api/auth/reset-password/route.ts",
        "methods": ["DELETE", "GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "cookies",
          "NextResponse",
          "z",
          "validPassword",
          "hashPassword",
          "prisma",
          "IdentityProvider"
        ]
      },
      {
        "routePath": "/api/auth/saml/authorize",
        "relativeFilePath": "app/api/auth/saml/authorize/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "jackson", "logger"]
      },
      {
        "routePath": "/api/auth/saml/callback",
        "relativeFilePath": "app/api/auth/saml/callback/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "parseRequestData", "NextResponse", "uuid", "jackson", "logger"]
      },
      {
        "routePath": "/api/auth/saml/token",
        "relativeFilePath": "app/api/auth/saml/token/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "parseRequestData", "NextResponse", "uuid", "jackson", "logger"]
      },
      {
        "routePath": "/api/auth/saml/userinfo",
        "relativeFilePath": "app/api/auth/saml/userinfo/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": ["defaultResponderForAppDir", "NextResponse", "uuid", "z", "jackson", "HttpError", "logger"]
      },
      {
        "routePath": "/api/auth/setup",
        "relativeFilePath": "app/api/auth/setup/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "NextResponse",
          "z",
          "hashPassword",
          "isPasswordValid",
          "emailRegex",
          "HttpError",
          "slugify",
          "prisma",
          "IdentityProvider",
          "CreationSource"
        ]
      },
      {
        "routePath": "/api/auth/signup",
        "relativeFilePath": "app/api/auth/signup/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "NextResponse",
          "type",
          "NextRequest",
          "calcomSignupHandler",
          "selfHostedSignupHandler",
          "FeaturesRepository",
          "IS_PREMIUM_USERNAME_ENABLED",
          "getIP",
          "HttpError",
          "logger",
          "checkCfTurnstileToken",
          "prisma",
          "signupSchema"
        ]
      },
      {
        "routePath": "/api/auth/two-factor/totp/disable",
        "relativeFilePath": "app/api/auth/two-factor/totp/disable/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "cookies",
          "headers",
          "NextResponse",
          "ErrorCode",
          "getServerSession",
          "verifyPassword",
          "symmetricDecrypt",
          "totpAuthenticatorCheck",
          "prisma",
          "IdentityProvider",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/auth/two-factor/totp/enable",
        "relativeFilePath": "app/api/auth/two-factor/totp/enable/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "cookies",
          "headers",
          "NextResponse",
          "ErrorCode",
          "getServerSession",
          "symmetricDecrypt",
          "totpAuthenticatorCheck",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/auth/two-factor/totp/setup",
        "relativeFilePath": "app/api/auth/two-factor/totp/setup/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "crypto",
          "cookies",
          "headers",
          "NextResponse",
          "authenticator",
          "qrcode",
          "ErrorCode",
          "getServerSession",
          "verifyPassword",
          "symmetricEncrypt",
          "prisma",
          "IdentityProvider",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/availability/calendar",
        "relativeFilePath": "app/api/availability/calendar/route.ts",
        "methods": ["DELETE"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "getServerSession",
          "CalendarCache",
          "getCalendarCredentials",
          "getConnectedCalendars",
          "HttpError",
          "notEmpty",
          "SelectedCalendarRepository",
          "UserRepository",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/avatar/:uuid",
        "relativeFilePath": "app/api/avatar/[uuid]/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "AVATAR_FALLBACK",
          "WEBAPP_URL",
          "convertSvgToPng",
          "prisma"
        ]
      },
      {
        "routePath": "/api/calAIPhone/subscription/success",
        "relativeFilePath": "app/api/calAIPhone/subscription/success/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/cancel",
        "relativeFilePath": "app/api/cancel/route.ts",
        "methods": ["DELETE", "GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "getServerSession",
          "handleCancelBooking",
          "bookingCancelWithCsrfSchema",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/cron/bookingReminder",
        "relativeFilePath": "app/api/cron/bookingReminder/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "dayjs",
          "sendOrganizerRequestReminderEmail",
          "getCalEventResponses",
          "isPrismaObjOrUndefined",
          "parseRecurringEvent",
          "getTranslation",
          "BookingStatus",
          "ReminderType"
        ]
      },
      {
        "routePath": "/api/cron/calendar-cache-cleanup",
        "relativeFilePath": "app/api/cron/calendar-cache-cleanup/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "prisma"]
      },
      {
        "routePath": "/api/cron/calendar-subscriptions-cleanup",
        "relativeFilePath": "app/api/cron/calendar-subscriptions-cleanup/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "CalendarCacheEventRepository",
          "CalendarCacheEventService",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/calendar-subscriptions",
        "relativeFilePath": "app/api/cron/calendar-subscriptions/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "DefaultAdapterFactory",
          "CalendarSubscriptionService",
          "CalendarCacheEventRepository",
          "CalendarCacheEventService",
          "CalendarSyncService",
          "FeaturesRepository",
          "SelectedCalendarRepository",
          "BookingRepository",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/changeTimeZone",
        "relativeFilePath": "app/api/cron/changeTimeZone/route.ts",
        "methods": ["DELETE", "GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "dayjs", "prisma", "getDefaultScheduleId"]
      },
      {
        "routePath": "/api/cron/checkSmsPrices",
        "relativeFilePath": "app/api/cron/checkSmsPrices/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "dayjs",
          "IS_SMS_CREDITS_ENABLED",
          "logger",
          "prisma",
          "CreditType"
        ]
      },
      {
        "routePath": "/api/cron/credentials",
        "relativeFilePath": "app/api/cron/credentials/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "HttpError",
          "logger",
          "safeStringify",
          "CredentialRepository",
          "DelegationCredentialRepository",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/downgradeUsers",
        "relativeFilePath": "app/api/cron/downgradeUsers/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": ["defaultResponderForAppDir", "NextResponse", "z", "TeamBilling", "prisma"]
      },
      {
        "routePath": "/api/cron/monthlyDigestEmail",
        "relativeFilePath": "app/api/cron/monthlyDigestEmail/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "dayjs",
          "sendMonthlyDigestEmails",
          "EventsInsights",
          "getTranslation",
          "prisma"
        ]
      },
      {
        "routePath": "/api/cron/queuedFormResponseCleanup",
        "relativeFilePath": "app/api/cron/queuedFormResponseCleanup/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handleQueuedFormResponseCleanup"]
      },
      {
        "routePath": "/api/cron/selected-calendars",
        "relativeFilePath": "app/api/cron/selected-calendars/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "GoogleCalendarService",
          "CalendarAppDelegationCredentialInvalidGrantError",
          "findUniqueDelegationCalendarCredential",
          "HttpError",
          "logger",
          "safeStringify",
          "CredentialRepository",
          "SelectedCalendarRepository",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/syncAppMeta",
        "relativeFilePath": "app/api/cron/syncAppMeta/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "getAppWithMetadata", "logger", "prisma"]
      },
      {
        "routePath": "/api/cron/webhookTriggers",
        "relativeFilePath": "app/api/cron/webhookTriggers/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "handleWebhookScheduledTriggers", "prisma"]
      },
      {
        "routePath": "/api/cron/workflows/scheduleEmailReminders",
        "relativeFilePath": "app/api/cron/workflows/scheduleEmailReminders/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/cron/workflows/scheduleSMSReminders",
        "relativeFilePath": "app/api/cron/workflows/scheduleSMSReminders/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/cron/workflows/scheduleWhatsappReminders",
        "relativeFilePath": "app/api/cron/workflows/scheduleWhatsappReminders/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/csrf",
        "relativeFilePath": "app/api/csrf/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["randomBytes", "NextResponse", "WEBAPP_URL"]
      },
      {
        "routePath": "/api/email",
        "relativeFilePath": "app/api/email/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "renderEmail",
          "IS_PRODUCTION",
          "getTranslation"
        ]
      },
      {
        "routePath": "/api/geolocation",
        "relativeFilePath": "app/api/geolocation/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "headers", "NextResponse"]
      },
      {
        "routePath": "/api/link",
        "relativeFilePath": "app/api/link/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "symmetricDecrypt",
          "prisma",
          "UserPermissionRole",
          "createContext",
          "bookingsRouter",
          "createCallerFactory",
          "buildLegacyRequest",
          "TRPCError"
        ]
      },
      {
        "routePath": "/api/logo",
        "relativeFilePath": "app/api/logo/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "orgDomainConfig",
          "ANDROID_CHROME_ICON_192",
          "ANDROID_CHROME_ICON_256",
          "APPLE_TOUCH_ICON",
          "FAVICON_16",
          "FAVICON_32",
          "IS_SELF_HOSTED",
          "LOGO",
          "LOGO_ICON",
          "MSTILE_ICON",
          "WEBAPP_URL",
          "logger",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/me",
        "relativeFilePath": "app/api/me/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "getServerSession",
          "performance",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/recorded-daily-video",
        "relativeFilePath": "app/api/recorded-daily-video/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "createHmac",
          "headers",
          "NextResponse",
          "getRoomNameFromRecordingId",
          "getBatchProcessorJobAccessLink",
          "sendDailyVideoRecordingEmails",
          "sendDailyVideoTranscriptEmails",
          "WEBAPP_URL",
          "getTeamIdFromEventType",
          "HttpError",
          "logger",
          "safeStringify",
          "getAllTranscriptsAccessLinkFromMeetingId",
          "submitBatchProcessorTranscriptionJob",
          "generateVideoToken",
          "prisma",
          "getBooking",
          "getBookingReference",
          "getCalendarEvent",
          "meetingEndedSchema",
          "recordingReadySchema",
          "batchProcessorJobFinishedSchema",
          "testRequestSchema",
          "triggerRecordingReadyWebhook",
          "triggerTranscriptionGeneratedWebhook"
        ]
      },
      {
        "routePath": "/api/routing-forms/queued-response",
        "relativeFilePath": "app/api/routing-forms/queued-response/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "NextResponse",
          "z",
          "ZodError",
          "onSubmissionOfFormResponse",
          "getResponseToStore",
          "getSerializableForm",
          "logger",
          "safeStringify",
          "RoutingFormResponseRepository",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/scim/v2.0/:...directory",
        "relativeFilePath": "app/api/scim/v2.0/[...directory]/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "handleGroupEvents",
          "handleUserEvents",
          "jackson",
          "DIRECTORY_IDS_TO_LOG",
          "logger",
          "safeStringify",
          "prisma"
        ]
      },
      {
        "routePath": "/api/support/conversation",
        "relativeFilePath": "app/api/support/conversation/route.ts",
        "methods": ["POST"],
        "hasValidation": false,
        "deps": [
          "cookies",
          "headers",
          "NextResponse",
          "getServerSession",
          "BillingPlanService",
          "intercom",
          "WEBAPP_URL",
          "WEBSITE_URL",
          "logger",
          "safeStringify",
          "MembershipRepository",
          "UserRepository",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/support/hash",
        "relativeFilePath": "app/api/support/hash/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "crypto",
          "getServerSession",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/sync/helpscout",
        "relativeFilePath": "app/api/sync/helpscout/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "createHmac",
          "headers",
          "cookies",
          "NextResponse",
          "getRawBody",
          "z",
          "emailSchema",
          "default",
          "as",
          "webPrisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/tasks/cleanup",
        "relativeFilePath": "app/api/tasks/cleanup/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "GET", "as", "handler"]
      },
      {
        "routePath": "/api/tasks/cron",
        "relativeFilePath": "app/api/tasks/cron/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "GET", "as", "handler"]
      },
      {
        "routePath": "/api/teams/:team/upgrade",
        "relativeFilePath": "app/api/teams/[team]/upgrade/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "getRequestedSlugError",
          "getServerSession",
          "stripe",
          "WEBAPP_URL",
          "HttpError",
          "prisma",
          "teamMetadataStrictSchema",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/teams/api/create",
        "relativeFilePath": "app/api/teams/api/create/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "stripe",
          "HttpError",
          "prisma",
          "MembershipRole",
          "MembershipSchema",
          "TeamSchema"
        ]
      },
      {
        "routePath": "/api/teams/create",
        "relativeFilePath": "app/api/teams/create/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "stripe",
          "HttpError",
          "prisma",
          "MembershipRole"
        ]
      },
      {
        "routePath": "/api/teams/googleworkspace/add",
        "relativeFilePath": "app/api/teams/googleworkspace/add/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "OAuth2Client",
          "NextResponse",
          "getAppKeysFromSlug",
          "WEBAPP_URL"
        ]
      },
      {
        "routePath": "/api/teams/googleworkspace/callback",
        "relativeFilePath": "app/api/teams/googleworkspace/callback/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "OAuth2Client",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "getAppKeysFromSlug",
          "throwIfNotHaveAdminAccessToTeam",
          "getServerSession",
          "WEBAPP_URL",
          "getSafeRedirectUrl",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/user/referrals-token",
        "relativeFilePath": "app/api/user/referrals-token/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "headers",
          "cookies",
          "NextResponse",
          "dub",
          "getServerSession",
          "IS_DUB_REFERRALS_ENABLED",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/username",
        "relativeFilePath": "app/api/username/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "orgDomainConfig",
          "checkUsername",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/verify-booking-token",
        "relativeFilePath": "app/api/verify-booking-token/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "headers",
          "cookies",
          "NextResponse",
          "z",
          "prisma",
          "UserPermissionRole",
          "createContext",
          "bookingsRouter",
          "createCallerFactory",
          "buildLegacyRequest",
          "TRPCError"
        ]
      },
      {
        "routePath": "/api/version",
        "relativeFilePath": "app/api/version/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "packageJson"]
      },
      {
        "routePath": "/api/video/recording",
        "relativeFilePath": "app/api/video/recording/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["NextResponse", "getDownloadLinkOfCalVideoByRecordingId", "verifyVideoToken"]
      },
      {
        "routePath": "/api/webhook/app-credential",
        "relativeFilePath": "app/api/webhook/app-credential/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "appStoreMetadata",
          "CREDENTIAL_SYNC_SECRET",
          "CREDENTIAL_SYNC_SECRET_HEADER_NAME",
          "APP_CREDENTIAL_SHARING_ENABLED",
          "symmetricDecrypt",
          "prisma"
        ]
      },
      {
        "routePath": "/api/webhooks/calendar-subscription/:provider",
        "relativeFilePath": "app/api/webhooks/calendar-subscription/[provider]/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "DefaultAdapterFactory",
          "CalendarSubscriptionService",
          "CalendarCacheEventRepository",
          "CalendarCacheEventService",
          "CalendarSyncService",
          "FeaturesRepository",
          "logger",
          "SelectedCalendarRepository",
          "BookingRepository",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/webhooks/retell-ai",
        "relativeFilePath": "app/api/webhooks/retell-ai/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "Retell",
          "z",
          "CreditService",
          "logger",
          "safeStringify",
          "PrismaAgentRepository",
          "PrismaPhoneNumberRepository",
          "CreditUsageType"
        ]
      },
      {
        "routePath": "/api/workflows/sms/user-response",
        "relativeFilePath": "app/api/workflows/sms/user-response/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handleSMSResponse"]
      },
      {
        "routePath": "/api/auth/:...nextauth",
        "relativeFilePath": "pages/api/auth/[...nextauth].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["NextAuth", "getOptions"]
      },
      {
        "routePath": "/api/auth/verify-email",
        "relativeFilePath": "pages/api/auth/verify-email.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/book/event",
        "relativeFilePath": "pages/api/book/event.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "getServerSession",
          "handleNewBooking",
          "checkRateLimitAndThrowError",
          "getIP",
          "piiHasher",
          "checkCfTurnstileToken",
          "defaultResponder",
          "CreationSource"
        ]
      },
      {
        "routePath": "/api/book/instant-event",
        "relativeFilePath": "pages/api/book/instant-event.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "getServerSession",
          "handleInstantMeeting",
          "checkRateLimitAndThrowError",
          "getIP",
          "piiHasher",
          "defaultResponder",
          "CreationSource"
        ]
      },
      {
        "routePath": "/api/book/recurring-event",
        "relativeFilePath": "pages/api/book/recurring-event.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "getServerSession",
          "handleNewRecurringBooking",
          "checkRateLimitAndThrowError",
          "getIP",
          "piiHasher",
          "checkCfTurnstileToken",
          "defaultResponder"
        ]
      },
      {
        "routePath": "/api/calendar-cache/cron",
        "relativeFilePath": "pages/api/calendar-cache/cron.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/collect-events",
        "relativeFilePath": "pages/api/collect-events.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["collectApiHandler", "extendEventData", "nextCollectBasicSettings"]
      },
      {
        "routePath": "/api/get-inbound-dynamic-variables",
        "relativeFilePath": "pages/api/get-inbound-dynamic-variables.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "advancedFormat",
          "z",
          "dayjs",
          "ZGetRetellLLMSchema",
          "getAvailableSlotsService",
          "fetcher",
          "defaultHandler",
          "prisma"
        ]
      },
      {
        "routePath": "/api/integrations/:...args",
        "relativeFilePath": "pages/api/integrations/[...args].ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "throwIfNotHaveAdminAccessToTeam",
          "getServerSession",
          "deriveAppDictKeyFromType",
          "HttpError",
          "prisma"
        ]
      },
      {
        "routePath": "/api/integrations/alby/webhook",
        "relativeFilePath": "pages/api/integrations/alby/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/btcpayserver/webhook",
        "relativeFilePath": "pages/api/integrations/btcpayserver/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/paypal/webhook",
        "relativeFilePath": "pages/api/integrations/paypal/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/stripepayment/webhook",
        "relativeFilePath": "pages/api/integrations/stripepayment/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/subscriptions/webhook",
        "relativeFilePath": "pages/api/integrations/subscriptions/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "buffer",
          "stripe",
          "IS_PRODUCTION",
          "getErrorFromUnknown",
          "HttpError",
          "as",
          "HttpCode",
          "prisma"
        ]
      },
      {
        "routePath": "/api/organizations/:org/subteams",
        "relativeFilePath": "pages/api/organizations/[org]/subteams.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/router",
        "relativeFilePath": "pages/api/router/index.ts",
        "methods": [],
        "hasValidation": true,
        "deps": ["getRoutedUrl", "defaultHandler", "defaultResponder"]
      },
      {
        "routePath": "/api/stripe/webhook",
        "relativeFilePath": "pages/api/stripe/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/trpc/admin/:trpc",
        "relativeFilePath": "pages/api/trpc/admin/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "adminRouter"]
      },
      {
        "routePath": "/api/trpc/aiVoiceAgent/:trpc",
        "relativeFilePath": "pages/api/trpc/aiVoiceAgent/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "aiVoiceAgentRouter"]
      },
      {
        "routePath": "/api/trpc/apiKeys/:trpc",
        "relativeFilePath": "pages/api/trpc/apiKeys/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "apiKeysRouter"]
      },
      {
        "routePath": "/api/trpc/appRoutingForms/:trpc",
        "relativeFilePath": "pages/api/trpc/appRoutingForms/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "appRoutingForms"]
      },
      {
        "routePath": "/api/trpc/apps/:trpc",
        "relativeFilePath": "pages/api/trpc/apps/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "appsRouter"]
      },
      {
        "routePath": "/api/trpc/appsRouter/:trpc",
        "relativeFilePath": "pages/api/trpc/appsRouter/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "appsRouter"]
      },
      {
        "routePath": "/api/trpc/attributes/:trpc",
        "relativeFilePath": "pages/api/trpc/attributes/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "attributesRouter"]
      },
      {
        "routePath": "/api/trpc/auth/:trpc",
        "relativeFilePath": "pages/api/trpc/auth/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "authRouter"]
      },
      {
        "routePath": "/api/trpc/availability/:trpc",
        "relativeFilePath": "pages/api/trpc/availability/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "availabilityRouter"]
      },
      {
        "routePath": "/api/trpc/bookings/:trpc",
        "relativeFilePath": "pages/api/trpc/bookings/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "bookingsRouter"]
      },
      {
        "routePath": "/api/trpc/calVideo/:trpc",
        "relativeFilePath": "pages/api/trpc/calVideo/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "calVideoRouter"]
      },
      {
        "routePath": "/api/trpc/calendars/:trpc",
        "relativeFilePath": "pages/api/trpc/calendars/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "calendarsRouter"]
      },
      {
        "routePath": "/api/trpc/credentials/:trpc",
        "relativeFilePath": "pages/api/trpc/credentials/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "credentialsRouter"]
      },
      {
        "routePath": "/api/trpc/credits/:trpc",
        "relativeFilePath": "pages/api/trpc/credits/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "creditsRouter"]
      },
      {
        "routePath": "/api/trpc/delegationCredential/:trpc",
        "relativeFilePath": "pages/api/trpc/delegationCredential/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "delegationCredentialRouter"]
      },
      {
        "routePath": "/api/trpc/deploymentSetup/:trpc",
        "relativeFilePath": "pages/api/trpc/deploymentSetup/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "deploymentSetupRouter"]
      },
      {
        "routePath": "/api/trpc/dsync/:trpc",
        "relativeFilePath": "pages/api/trpc/dsync/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "dsyncRouter"]
      },
      {
        "routePath": "/api/trpc/eventTypes/:trpc",
        "relativeFilePath": "pages/api/trpc/eventTypes/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "eventTypesRouter"]
      },
      {
        "routePath": "/api/trpc/eventTypes/heavy/:trpc",
        "relativeFilePath": "pages/api/trpc/eventTypes/heavy/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "eventTypesRouter"]
      },
      {
        "routePath": "/api/trpc/features/:trpc",
        "relativeFilePath": "pages/api/trpc/features/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["featureFlagRouter", "createNextApiHandler"]
      },
      {
        "routePath": "/api/trpc/filterSegments/:trpc",
        "relativeFilePath": "pages/api/trpc/filterSegments/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "filterSegmentsRouter"]
      },
      {
        "routePath": "/api/trpc/googleWorkspace/:trpc",
        "relativeFilePath": "pages/api/trpc/googleWorkspace/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "googleWorkspaceRouter"]
      },
      {
        "routePath": "/api/trpc/i18n/:trpc",
        "relativeFilePath": "pages/api/trpc/i18n/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "i18nRouter"]
      },
      {
        "routePath": "/api/trpc/insights/:trpc",
        "relativeFilePath": "pages/api/trpc/insights/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["insightsRouter", "createNextApiHandler"]
      },
      {
        "routePath": "/api/trpc/loggedInViewerRouter/:trpc",
        "relativeFilePath": "pages/api/trpc/loggedInViewerRouter/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "loggedInViewerRouter"]
      },
      {
        "routePath": "/api/trpc/me/:trpc",
        "relativeFilePath": "pages/api/trpc/me/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "meRouter"]
      },
      {
        "routePath": "/api/trpc/oAuth/:trpc",
        "relativeFilePath": "pages/api/trpc/oAuth/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "oAuthRouter"]
      },
      {
        "routePath": "/api/trpc/ooo/:trpc",
        "relativeFilePath": "pages/api/trpc/ooo/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "oooRouter"]
      },
      {
        "routePath": "/api/trpc/organizations/:trpc",
        "relativeFilePath": "pages/api/trpc/organizations/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "viewerOrganizationsRouter"]
      },
      {
        "routePath": "/api/trpc/payments/:trpc",
        "relativeFilePath": "pages/api/trpc/payments/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "paymentsRouter"]
      },
      {
        "routePath": "/api/trpc/pbac/:trpc",
        "relativeFilePath": "pages/api/trpc/pbac/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "permissionsRouter"]
      },
      {
        "routePath": "/api/trpc/phoneNumber/:trpc",
        "relativeFilePath": "pages/api/trpc/phoneNumber/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "phoneNumberRouter"]
      },
      {
        "routePath": "/api/trpc/routingForms/:trpc",
        "relativeFilePath": "pages/api/trpc/routingForms/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "routingFormsRouter"]
      },
      {
        "routePath": "/api/trpc/saml/:trpc",
        "relativeFilePath": "pages/api/trpc/saml/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "ssoRouter"]
      },
      {
        "routePath": "/api/trpc/slots/:trpc",
        "relativeFilePath": "pages/api/trpc/slots/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "slotsRouter"]
      },
      {
        "routePath": "/api/trpc/teams/:trpc",
        "relativeFilePath": "pages/api/trpc/teams/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "viewerTeamsRouter"]
      },
      {
        "routePath": "/api/trpc/timezones/:trpc",
        "relativeFilePath": "pages/api/trpc/timezones/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "timezonesRouter"]
      },
      {
        "routePath": "/api/trpc/travelSchedules/:trpc",
        "relativeFilePath": "pages/api/trpc/travelSchedules/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "travelSchedulesRouter"]
      },
      {
        "routePath": "/api/trpc/users/:trpc",
        "relativeFilePath": "pages/api/trpc/users/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["userAdminRouter", "createNextApiHandler"]
      },
      {
        "routePath": "/api/trpc/viewer/:trpc",
        "relativeFilePath": "pages/api/trpc/viewer/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "loggedInViewerRouter"]
      },
      {
        "routePath": "/api/trpc/webhook/:trpc",
        "relativeFilePath": "pages/api/trpc/webhook/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "webhookRouter"]
      },
      {
        "routePath": "/api/trpc/workflows/:trpc",
        "relativeFilePath": "pages/api/trpc/workflows/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "workflowsRouter"]
      },
      {
        "routePath": "/api/twilio/webhook",
        "relativeFilePath": "pages/api/twilio/webhook.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "z",
          "IS_SMS_CREDITS_ENABLED",
          "WEBAPP_URL",
          "getPublishedOrgIdFromMemberOrTeamId",
          "defaultHandler",
          "prisma",
          "CreditUsageType"
        ]
      },
      {
        "routePath": "/api/auth/forgot-password",
        "relativeFilePath": "app/api/auth/forgot-password/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "NextResponse",
          "passwordResetRequest",
          "checkRateLimitAndThrowError",
          "emailSchema",
          "prisma",
          "piiHasher"
        ]
      },
      {
        "routePath": "/api/auth/oauth/me",
        "relativeFilePath": "app/api/auth/oauth/me/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "isAuthorized"]
      },
      {
        "routePath": "/api/auth/oauth/refreshToken",
        "relativeFilePath": "app/api/auth/oauth/refreshToken/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseUrlFormData",
          "jwt",
          "NextResponse",
          "prisma",
          "generateSecret"
        ]
      },
      {
        "routePath": "/api/auth/oauth/token",
        "relativeFilePath": "app/api/auth/oauth/token/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseUrlFormData",
          "jwt",
          "NextResponse",
          "prisma",
          "generateSecret"
        ]
      },
      {
        "routePath": "/api/auth/oidc",
        "relativeFilePath": "app/api/auth/oidc/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "jackson", "HttpError", "logger"]
      },
      {
        "routePath": "/api/auth/reset-password",
        "relativeFilePath": "app/api/auth/reset-password/route.ts",
        "methods": ["DELETE", "GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "cookies",
          "NextResponse",
          "z",
          "validPassword",
          "hashPassword",
          "prisma",
          "IdentityProvider"
        ]
      },
      {
        "routePath": "/api/auth/saml/authorize",
        "relativeFilePath": "app/api/auth/saml/authorize/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "jackson", "logger"]
      },
      {
        "routePath": "/api/auth/saml/callback",
        "relativeFilePath": "app/api/auth/saml/callback/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "parseRequestData", "NextResponse", "uuid", "jackson", "logger"]
      },
      {
        "routePath": "/api/auth/saml/token",
        "relativeFilePath": "app/api/auth/saml/token/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "parseRequestData", "NextResponse", "uuid", "jackson", "logger"]
      },
      {
        "routePath": "/api/auth/saml/userinfo",
        "relativeFilePath": "app/api/auth/saml/userinfo/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": ["defaultResponderForAppDir", "NextResponse", "uuid", "z", "jackson", "HttpError", "logger"]
      },
      {
        "routePath": "/api/auth/setup",
        "relativeFilePath": "app/api/auth/setup/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "NextResponse",
          "z",
          "hashPassword",
          "isPasswordValid",
          "emailRegex",
          "HttpError",
          "slugify",
          "prisma",
          "IdentityProvider",
          "CreationSource"
        ]
      },
      {
        "routePath": "/api/auth/signup",
        "relativeFilePath": "app/api/auth/signup/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "NextResponse",
          "type",
          "NextRequest",
          "calcomSignupHandler",
          "selfHostedSignupHandler",
          "FeaturesRepository",
          "IS_PREMIUM_USERNAME_ENABLED",
          "getIP",
          "HttpError",
          "logger",
          "checkCfTurnstileToken",
          "prisma",
          "signupSchema"
        ]
      },
      {
        "routePath": "/api/auth/two-factor/totp/disable",
        "relativeFilePath": "app/api/auth/two-factor/totp/disable/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "cookies",
          "headers",
          "NextResponse",
          "ErrorCode",
          "getServerSession",
          "verifyPassword",
          "symmetricDecrypt",
          "totpAuthenticatorCheck",
          "prisma",
          "IdentityProvider",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/auth/two-factor/totp/enable",
        "relativeFilePath": "app/api/auth/two-factor/totp/enable/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "cookies",
          "headers",
          "NextResponse",
          "ErrorCode",
          "getServerSession",
          "symmetricDecrypt",
          "totpAuthenticatorCheck",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/auth/two-factor/totp/setup",
        "relativeFilePath": "app/api/auth/two-factor/totp/setup/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "crypto",
          "cookies",
          "headers",
          "NextResponse",
          "authenticator",
          "qrcode",
          "ErrorCode",
          "getServerSession",
          "verifyPassword",
          "symmetricEncrypt",
          "prisma",
          "IdentityProvider",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/availability/calendar",
        "relativeFilePath": "app/api/availability/calendar/route.ts",
        "methods": ["DELETE"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "getServerSession",
          "CalendarCache",
          "getCalendarCredentials",
          "getConnectedCalendars",
          "HttpError",
          "notEmpty",
          "SelectedCalendarRepository",
          "UserRepository",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/avatar/:uuid",
        "relativeFilePath": "app/api/avatar/[uuid]/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "AVATAR_FALLBACK",
          "WEBAPP_URL",
          "convertSvgToPng",
          "prisma"
        ]
      },
      {
        "routePath": "/api/calAIPhone/subscription/success",
        "relativeFilePath": "app/api/calAIPhone/subscription/success/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/cancel",
        "relativeFilePath": "app/api/cancel/route.ts",
        "methods": ["DELETE", "GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "getServerSession",
          "handleCancelBooking",
          "bookingCancelWithCsrfSchema",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/cron/bookingReminder",
        "relativeFilePath": "app/api/cron/bookingReminder/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "dayjs",
          "sendOrganizerRequestReminderEmail",
          "getCalEventResponses",
          "isPrismaObjOrUndefined",
          "parseRecurringEvent",
          "getTranslation",
          "BookingStatus",
          "ReminderType"
        ]
      },
      {
        "routePath": "/api/cron/calendar-cache-cleanup",
        "relativeFilePath": "app/api/cron/calendar-cache-cleanup/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "prisma"]
      },
      {
        "routePath": "/api/cron/calendar-subscriptions-cleanup",
        "relativeFilePath": "app/api/cron/calendar-subscriptions-cleanup/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "CalendarCacheEventRepository",
          "CalendarCacheEventService",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/calendar-subscriptions",
        "relativeFilePath": "app/api/cron/calendar-subscriptions/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "DefaultAdapterFactory",
          "CalendarSubscriptionService",
          "CalendarCacheEventRepository",
          "CalendarCacheEventService",
          "CalendarSyncService",
          "FeaturesRepository",
          "SelectedCalendarRepository",
          "BookingRepository",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/changeTimeZone",
        "relativeFilePath": "app/api/cron/changeTimeZone/route.ts",
        "methods": ["DELETE", "GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "dayjs", "prisma", "getDefaultScheduleId"]
      },
      {
        "routePath": "/api/cron/checkSmsPrices",
        "relativeFilePath": "app/api/cron/checkSmsPrices/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "dayjs",
          "IS_SMS_CREDITS_ENABLED",
          "logger",
          "prisma",
          "CreditType"
        ]
      },
      {
        "routePath": "/api/cron/credentials",
        "relativeFilePath": "app/api/cron/credentials/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "HttpError",
          "logger",
          "safeStringify",
          "CredentialRepository",
          "DelegationCredentialRepository",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/downgradeUsers",
        "relativeFilePath": "app/api/cron/downgradeUsers/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": ["defaultResponderForAppDir", "NextResponse", "z", "TeamBilling", "prisma"]
      },
      {
        "routePath": "/api/cron/monthlyDigestEmail",
        "relativeFilePath": "app/api/cron/monthlyDigestEmail/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "dayjs",
          "sendMonthlyDigestEmails",
          "EventsInsights",
          "getTranslation",
          "prisma"
        ]
      },
      {
        "routePath": "/api/cron/queuedFormResponseCleanup",
        "relativeFilePath": "app/api/cron/queuedFormResponseCleanup/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handleQueuedFormResponseCleanup"]
      },
      {
        "routePath": "/api/cron/selected-calendars",
        "relativeFilePath": "app/api/cron/selected-calendars/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "GoogleCalendarService",
          "CalendarAppDelegationCredentialInvalidGrantError",
          "findUniqueDelegationCalendarCredential",
          "HttpError",
          "logger",
          "safeStringify",
          "CredentialRepository",
          "SelectedCalendarRepository",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/cron/syncAppMeta",
        "relativeFilePath": "app/api/cron/syncAppMeta/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "getAppWithMetadata", "logger", "prisma"]
      },
      {
        "routePath": "/api/cron/webhookTriggers",
        "relativeFilePath": "app/api/cron/webhookTriggers/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "handleWebhookScheduledTriggers", "prisma"]
      },
      {
        "routePath": "/api/cron/workflows/scheduleEmailReminders",
        "relativeFilePath": "app/api/cron/workflows/scheduleEmailReminders/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/cron/workflows/scheduleSMSReminders",
        "relativeFilePath": "app/api/cron/workflows/scheduleSMSReminders/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/cron/workflows/scheduleWhatsappReminders",
        "relativeFilePath": "app/api/cron/workflows/scheduleWhatsappReminders/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handler"]
      },
      {
        "routePath": "/api/csrf",
        "relativeFilePath": "app/api/csrf/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["randomBytes", "NextResponse", "WEBAPP_URL"]
      },
      {
        "routePath": "/api/defaultResponderForAppDir.ts",
        "relativeFilePath": "app/api/defaultResponderForAppDir.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["ApiError", "NextResponse", "getServerErrorFromUnknown", "performance"]
      },
      {
        "routePath": "/api/email",
        "relativeFilePath": "app/api/email/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "renderEmail",
          "IS_PRODUCTION",
          "getTranslation"
        ]
      },
      {
        "routePath": "/api/geolocation",
        "relativeFilePath": "app/api/geolocation/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "headers", "NextResponse"]
      },
      {
        "routePath": "/api/link",
        "relativeFilePath": "app/api/link/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "symmetricDecrypt",
          "prisma",
          "UserPermissionRole",
          "createContext",
          "bookingsRouter",
          "createCallerFactory",
          "buildLegacyRequest",
          "TRPCError"
        ]
      },
      {
        "routePath": "/api/logo",
        "relativeFilePath": "app/api/logo/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "orgDomainConfig",
          "ANDROID_CHROME_ICON_192",
          "ANDROID_CHROME_ICON_256",
          "APPLE_TOUCH_ICON",
          "FAVICON_16",
          "FAVICON_32",
          "IS_SELF_HOSTED",
          "LOGO",
          "LOGO_ICON",
          "MSTILE_ICON",
          "WEBAPP_URL",
          "logger",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/me",
        "relativeFilePath": "app/api/me/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "getServerSession",
          "performance",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/parseRequestData.ts",
        "relativeFilePath": "app/api/parseRequestData.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["HttpError", "logger"]
      },
      {
        "routePath": "/api/recorded-daily-video",
        "relativeFilePath": "app/api/recorded-daily-video/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "createHmac",
          "headers",
          "NextResponse",
          "getRoomNameFromRecordingId",
          "getBatchProcessorJobAccessLink",
          "sendDailyVideoRecordingEmails",
          "sendDailyVideoTranscriptEmails",
          "WEBAPP_URL",
          "getTeamIdFromEventType",
          "HttpError",
          "logger",
          "safeStringify",
          "getAllTranscriptsAccessLinkFromMeetingId",
          "submitBatchProcessorTranscriptionJob",
          "generateVideoToken",
          "prisma",
          "getBooking",
          "getBookingReference",
          "getCalendarEvent",
          "meetingEndedSchema",
          "recordingReadySchema",
          "batchProcessorJobFinishedSchema",
          "testRequestSchema",
          "triggerRecordingReadyWebhook",
          "triggerTranscriptionGeneratedWebhook"
        ]
      },
      {
        "routePath": "/api/routing-forms/queued-response",
        "relativeFilePath": "app/api/routing-forms/queued-response/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "NextResponse",
          "z",
          "ZodError",
          "onSubmissionOfFormResponse",
          "getResponseToStore",
          "getSerializableForm",
          "logger",
          "safeStringify",
          "RoutingFormResponseRepository",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/scim/v2.0/:...directory",
        "relativeFilePath": "app/api/scim/v2.0/[...directory]/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "handleGroupEvents",
          "handleUserEvents",
          "jackson",
          "DIRECTORY_IDS_TO_LOG",
          "logger",
          "safeStringify",
          "prisma"
        ]
      },
      {
        "routePath": "/api/social/og/image",
        "relativeFilePath": "app/api/social/og/image/route.tsx",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": ["ImageResponse", "z", "ZodError", "Meeting", "App", "Generic", "WEBAPP_URL"]
      },
      {
        "routePath": "/api/support/conversation",
        "relativeFilePath": "app/api/support/conversation/route.ts",
        "methods": ["POST"],
        "hasValidation": false,
        "deps": [
          "cookies",
          "headers",
          "NextResponse",
          "getServerSession",
          "BillingPlanService",
          "intercom",
          "WEBAPP_URL",
          "WEBSITE_URL",
          "logger",
          "safeStringify",
          "MembershipRepository",
          "UserRepository",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/support/hash",
        "relativeFilePath": "app/api/support/hash/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "crypto",
          "getServerSession",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/sync/helpscout",
        "relativeFilePath": "app/api/sync/helpscout/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "createHmac",
          "headers",
          "cookies",
          "NextResponse",
          "getRawBody",
          "z",
          "emailSchema",
          "default",
          "as",
          "webPrisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/tasks/cleanup",
        "relativeFilePath": "app/api/tasks/cleanup/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "GET", "as", "handler"]
      },
      {
        "routePath": "/api/tasks/cron",
        "relativeFilePath": "app/api/tasks/cron/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "GET", "as", "handler"]
      },
      {
        "routePath": "/api/teams/:team/upgrade",
        "relativeFilePath": "app/api/teams/[team]/upgrade/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "getRequestedSlugError",
          "getServerSession",
          "stripe",
          "WEBAPP_URL",
          "HttpError",
          "prisma",
          "teamMetadataStrictSchema",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/teams/api/create",
        "relativeFilePath": "app/api/teams/api/create/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "stripe",
          "HttpError",
          "prisma",
          "MembershipRole",
          "MembershipSchema",
          "TeamSchema"
        ]
      },
      {
        "routePath": "/api/teams/create",
        "relativeFilePath": "app/api/teams/create/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "stripe",
          "HttpError",
          "prisma",
          "MembershipRole"
        ]
      },
      {
        "routePath": "/api/teams/googleworkspace/add",
        "relativeFilePath": "app/api/teams/googleworkspace/add/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "OAuth2Client",
          "NextResponse",
          "getAppKeysFromSlug",
          "WEBAPP_URL"
        ]
      },
      {
        "routePath": "/api/teams/googleworkspace/callback",
        "relativeFilePath": "app/api/teams/googleworkspace/callback/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "OAuth2Client",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "getAppKeysFromSlug",
          "throwIfNotHaveAdminAccessToTeam",
          "getServerSession",
          "WEBAPP_URL",
          "getSafeRedirectUrl",
          "prisma",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/user/referrals-token",
        "relativeFilePath": "app/api/user/referrals-token/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "defaultResponderForAppDir",
          "headers",
          "cookies",
          "NextResponse",
          "dub",
          "getServerSession",
          "IS_DUB_REFERRALS_ENABLED",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/username",
        "relativeFilePath": "app/api/username/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "cookies",
          "headers",
          "NextResponse",
          "z",
          "orgDomainConfig",
          "checkUsername",
          "buildLegacyRequest"
        ]
      },
      {
        "routePath": "/api/verify-booking-token",
        "relativeFilePath": "app/api/verify-booking-token/route.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "parseRequestData",
          "headers",
          "cookies",
          "NextResponse",
          "z",
          "prisma",
          "UserPermissionRole",
          "createContext",
          "bookingsRouter",
          "createCallerFactory",
          "buildLegacyRequest",
          "TRPCError"
        ]
      },
      {
        "routePath": "/api/version",
        "relativeFilePath": "app/api/version/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "NextResponse", "packageJson"]
      },
      {
        "routePath": "/api/video/recording",
        "relativeFilePath": "app/api/video/recording/route.ts",
        "methods": ["GET"],
        "hasValidation": false,
        "deps": ["NextResponse", "getDownloadLinkOfCalVideoByRecordingId", "verifyVideoToken"]
      },
      {
        "routePath": "/api/webhook/app-credential",
        "relativeFilePath": "app/api/webhook/app-credential/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "z",
          "appStoreMetadata",
          "CREDENTIAL_SYNC_SECRET",
          "CREDENTIAL_SYNC_SECRET_HEADER_NAME",
          "APP_CREDENTIAL_SHARING_ENABLED",
          "symmetricDecrypt",
          "prisma"
        ]
      },
      {
        "routePath": "/api/webhooks/calendar-subscription/:provider",
        "relativeFilePath": "app/api/webhooks/calendar-subscription/[provider]/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "NextResponse",
          "DefaultAdapterFactory",
          "CalendarSubscriptionService",
          "CalendarCacheEventRepository",
          "CalendarCacheEventService",
          "CalendarSyncService",
          "FeaturesRepository",
          "logger",
          "SelectedCalendarRepository",
          "BookingRepository",
          "prisma",
          "defaultResponderForAppDir"
        ]
      },
      {
        "routePath": "/api/webhooks/retell-ai",
        "relativeFilePath": "app/api/webhooks/retell-ai/route.ts",
        "methods": ["GET"],
        "hasValidation": true,
        "deps": [
          "defaultResponderForAppDir",
          "NextResponse",
          "Retell",
          "z",
          "CreditService",
          "logger",
          "safeStringify",
          "PrismaAgentRepository",
          "PrismaPhoneNumberRepository",
          "CreditUsageType"
        ]
      },
      {
        "routePath": "/api/workflows/sms/user-response",
        "relativeFilePath": "app/api/workflows/sms/user-response/route.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["defaultResponderForAppDir", "handleSMSResponse"]
      },
      {
        "routePath": "/api/auth/:...nextauth",
        "relativeFilePath": "pages/api/auth/[...nextauth].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["NextAuth", "getOptions"]
      },
      {
        "routePath": "/api/auth/verify-email",
        "relativeFilePath": "pages/api/auth/verify-email.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/book/event",
        "relativeFilePath": "pages/api/book/event.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "getServerSession",
          "handleNewBooking",
          "checkRateLimitAndThrowError",
          "getIP",
          "piiHasher",
          "checkCfTurnstileToken",
          "defaultResponder",
          "CreationSource"
        ]
      },
      {
        "routePath": "/api/book/instant-event",
        "relativeFilePath": "pages/api/book/instant-event.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "getServerSession",
          "handleInstantMeeting",
          "checkRateLimitAndThrowError",
          "getIP",
          "piiHasher",
          "defaultResponder",
          "CreationSource"
        ]
      },
      {
        "routePath": "/api/book/recurring-event",
        "relativeFilePath": "pages/api/book/recurring-event.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "getServerSession",
          "handleNewRecurringBooking",
          "checkRateLimitAndThrowError",
          "getIP",
          "piiHasher",
          "checkCfTurnstileToken",
          "defaultResponder"
        ]
      },
      {
        "routePath": "/api/calendar-cache/cron",
        "relativeFilePath": "pages/api/calendar-cache/cron.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/collect-events",
        "relativeFilePath": "pages/api/collect-events.ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["collectApiHandler", "extendEventData", "nextCollectBasicSettings"]
      },
      {
        "routePath": "/api/get-inbound-dynamic-variables",
        "relativeFilePath": "pages/api/get-inbound-dynamic-variables.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "advancedFormat",
          "z",
          "dayjs",
          "ZGetRetellLLMSchema",
          "getAvailableSlotsService",
          "fetcher",
          "defaultHandler",
          "prisma"
        ]
      },
      {
        "routePath": "/api/integrations/:...args",
        "relativeFilePath": "pages/api/integrations/[...args].ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "throwIfNotHaveAdminAccessToTeam",
          "getServerSession",
          "deriveAppDictKeyFromType",
          "HttpError",
          "prisma"
        ]
      },
      {
        "routePath": "/api/integrations/alby/webhook",
        "relativeFilePath": "pages/api/integrations/alby/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/btcpayserver/webhook",
        "relativeFilePath": "pages/api/integrations/btcpayserver/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/paypal/webhook",
        "relativeFilePath": "pages/api/integrations/paypal/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/stripepayment/webhook",
        "relativeFilePath": "pages/api/integrations/stripepayment/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/integrations/subscriptions/webhook",
        "relativeFilePath": "pages/api/integrations/subscriptions/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": [
          "buffer",
          "stripe",
          "IS_PRODUCTION",
          "getErrorFromUnknown",
          "HttpError",
          "as",
          "HttpCode",
          "prisma"
        ]
      },
      {
        "routePath": "/api/organizations/:org/subteams",
        "relativeFilePath": "pages/api/organizations/[org]/subteams.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/router",
        "relativeFilePath": "pages/api/router/index.ts",
        "methods": [],
        "hasValidation": true,
        "deps": ["getRoutedUrl", "defaultHandler", "defaultResponder"]
      },
      {
        "routePath": "/api/stripe/webhook",
        "relativeFilePath": "pages/api/stripe/webhook.ts",
        "methods": [],
        "hasValidation": false,
        "deps": []
      },
      {
        "routePath": "/api/trpc/admin/:trpc",
        "relativeFilePath": "pages/api/trpc/admin/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "adminRouter"]
      },
      {
        "routePath": "/api/trpc/aiVoiceAgent/:trpc",
        "relativeFilePath": "pages/api/trpc/aiVoiceAgent/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "aiVoiceAgentRouter"]
      },
      {
        "routePath": "/api/trpc/apiKeys/:trpc",
        "relativeFilePath": "pages/api/trpc/apiKeys/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "apiKeysRouter"]
      },
      {
        "routePath": "/api/trpc/appRoutingForms/:trpc",
        "relativeFilePath": "pages/api/trpc/appRoutingForms/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "appRoutingForms"]
      },
      {
        "routePath": "/api/trpc/apps/:trpc",
        "relativeFilePath": "pages/api/trpc/apps/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "appsRouter"]
      },
      {
        "routePath": "/api/trpc/appsRouter/:trpc",
        "relativeFilePath": "pages/api/trpc/appsRouter/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "appsRouter"]
      },
      {
        "routePath": "/api/trpc/attributes/:trpc",
        "relativeFilePath": "pages/api/trpc/attributes/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "attributesRouter"]
      },
      {
        "routePath": "/api/trpc/auth/:trpc",
        "relativeFilePath": "pages/api/trpc/auth/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "authRouter"]
      },
      {
        "routePath": "/api/trpc/availability/:trpc",
        "relativeFilePath": "pages/api/trpc/availability/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "availabilityRouter"]
      },
      {
        "routePath": "/api/trpc/bookings/:trpc",
        "relativeFilePath": "pages/api/trpc/bookings/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "bookingsRouter"]
      },
      {
        "routePath": "/api/trpc/calVideo/:trpc",
        "relativeFilePath": "pages/api/trpc/calVideo/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "calVideoRouter"]
      },
      {
        "routePath": "/api/trpc/calendars/:trpc",
        "relativeFilePath": "pages/api/trpc/calendars/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "calendarsRouter"]
      },
      {
        "routePath": "/api/trpc/credentials/:trpc",
        "relativeFilePath": "pages/api/trpc/credentials/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "credentialsRouter"]
      },
      {
        "routePath": "/api/trpc/credits/:trpc",
        "relativeFilePath": "pages/api/trpc/credits/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "creditsRouter"]
      },
      {
        "routePath": "/api/trpc/delegationCredential/:trpc",
        "relativeFilePath": "pages/api/trpc/delegationCredential/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "delegationCredentialRouter"]
      },
      {
        "routePath": "/api/trpc/deploymentSetup/:trpc",
        "relativeFilePath": "pages/api/trpc/deploymentSetup/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "deploymentSetupRouter"]
      },
      {
        "routePath": "/api/trpc/dsync/:trpc",
        "relativeFilePath": "pages/api/trpc/dsync/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "dsyncRouter"]
      },
      {
        "routePath": "/api/trpc/eventTypes/:trpc",
        "relativeFilePath": "pages/api/trpc/eventTypes/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "eventTypesRouter"]
      },
      {
        "routePath": "/api/trpc/eventTypes/heavy/:trpc",
        "relativeFilePath": "pages/api/trpc/eventTypes/heavy/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "eventTypesRouter"]
      },
      {
        "routePath": "/api/trpc/features/:trpc",
        "relativeFilePath": "pages/api/trpc/features/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["featureFlagRouter", "createNextApiHandler"]
      },
      {
        "routePath": "/api/trpc/filterSegments/:trpc",
        "relativeFilePath": "pages/api/trpc/filterSegments/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "filterSegmentsRouter"]
      },
      {
        "routePath": "/api/trpc/googleWorkspace/:trpc",
        "relativeFilePath": "pages/api/trpc/googleWorkspace/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "googleWorkspaceRouter"]
      },
      {
        "routePath": "/api/trpc/i18n/:trpc",
        "relativeFilePath": "pages/api/trpc/i18n/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "i18nRouter"]
      },
      {
        "routePath": "/api/trpc/insights/:trpc",
        "relativeFilePath": "pages/api/trpc/insights/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["insightsRouter", "createNextApiHandler"]
      },
      {
        "routePath": "/api/trpc/loggedInViewerRouter/:trpc",
        "relativeFilePath": "pages/api/trpc/loggedInViewerRouter/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "loggedInViewerRouter"]
      },
      {
        "routePath": "/api/trpc/me/:trpc",
        "relativeFilePath": "pages/api/trpc/me/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "meRouter"]
      },
      {
        "routePath": "/api/trpc/oAuth/:trpc",
        "relativeFilePath": "pages/api/trpc/oAuth/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "oAuthRouter"]
      },
      {
        "routePath": "/api/trpc/ooo/:trpc",
        "relativeFilePath": "pages/api/trpc/ooo/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "oooRouter"]
      },
      {
        "routePath": "/api/trpc/organizations/:trpc",
        "relativeFilePath": "pages/api/trpc/organizations/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "viewerOrganizationsRouter"]
      },
      {
        "routePath": "/api/trpc/payments/:trpc",
        "relativeFilePath": "pages/api/trpc/payments/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "paymentsRouter"]
      },
      {
        "routePath": "/api/trpc/pbac/:trpc",
        "relativeFilePath": "pages/api/trpc/pbac/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "permissionsRouter"]
      },
      {
        "routePath": "/api/trpc/phoneNumber/:trpc",
        "relativeFilePath": "pages/api/trpc/phoneNumber/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "phoneNumberRouter"]
      },
      {
        "routePath": "/api/trpc/routingForms/:trpc",
        "relativeFilePath": "pages/api/trpc/routingForms/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "routingFormsRouter"]
      },
      {
        "routePath": "/api/trpc/saml/:trpc",
        "relativeFilePath": "pages/api/trpc/saml/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "ssoRouter"]
      },
      {
        "routePath": "/api/trpc/slots/:trpc",
        "relativeFilePath": "pages/api/trpc/slots/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "slotsRouter"]
      },
      {
        "routePath": "/api/trpc/teams/:trpc",
        "relativeFilePath": "pages/api/trpc/teams/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "viewerTeamsRouter"]
      },
      {
        "routePath": "/api/trpc/timezones/:trpc",
        "relativeFilePath": "pages/api/trpc/timezones/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "timezonesRouter"]
      },
      {
        "routePath": "/api/trpc/travelSchedules/:trpc",
        "relativeFilePath": "pages/api/trpc/travelSchedules/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "travelSchedulesRouter"]
      },
      {
        "routePath": "/api/trpc/users/:trpc",
        "relativeFilePath": "pages/api/trpc/users/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["userAdminRouter", "createNextApiHandler"]
      },
      {
        "routePath": "/api/trpc/viewer/:trpc",
        "relativeFilePath": "pages/api/trpc/viewer/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "loggedInViewerRouter"]
      },
      {
        "routePath": "/api/trpc/webhook/:trpc",
        "relativeFilePath": "pages/api/trpc/webhook/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "webhookRouter"]
      },
      {
        "routePath": "/api/trpc/workflows/:trpc",
        "relativeFilePath": "pages/api/trpc/workflows/[trpc].ts",
        "methods": [],
        "hasValidation": false,
        "deps": ["createNextApiHandler", "workflowsRouter"]
      },
      {
        "routePath": "/api/twilio/webhook",
        "relativeFilePath": "pages/api/twilio/webhook.ts",
        "methods": [],
        "hasValidation": true,
        "deps": [
          "z",
          "IS_SMS_CREDITS_ENABLED",
          "WEBAPP_URL",
          "getPublishedOrgIdFromMemberOrTeamId",
          "defaultHandler",
          "prisma",
          "CreditUsageType"
        ]
      }
    ],
    "all_paths": [
      "app/(booking-page-wrapper)/[user]/[type]/embed/page.tsx",
      "app/(booking-page-wrapper)/[user]/[type]/page.tsx",
      "app/(booking-page-wrapper)/[user]/embed/page.tsx",
      "app/(booking-page-wrapper)/[user]/page.tsx",
      "app/(booking-page-wrapper)/booking/[uid]/embed/page.tsx",
      "app/(booking-page-wrapper)/booking/[uid]/page.tsx",
      "app/(booking-page-wrapper)/booking/dry-run-successful/page.tsx",
      "app/(booking-page-wrapper)/d/[link]/[slug]/page.tsx",
      "app/(booking-page-wrapper)/layout.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/[user]/[type]/embed/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/[user]/[type]/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/[user]/embed/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/[user]/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/embed/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/instant-meeting/team/[slug]/[type]/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/team/[slug]/[type]/page.tsx",
      "app/(booking-page-wrapper)/org/[orgSlug]/team/[slug]/page.tsx",
      "app/(booking-page-wrapper)/team/[slug]/[type]/actions.ts",
      "app/(booking-page-wrapper)/team/[slug]/[type]/embed/page.tsx",
      "app/(booking-page-wrapper)/team/[slug]/[type]/page.tsx",
      "app/(booking-page-wrapper)/team/[slug]/[type]/pageWithCachedData.tsx",
      "app/(booking-page-wrapper)/team/[slug]/[type]/queries.ts",
      "app/(booking-page-wrapper)/team/[slug]/embed/page.tsx",
      "app/(booking-page-wrapper)/team/[slug]/page.tsx",
      "app/(use-page-wrapper)/(main-nav)/ShellMainAppDir.tsx",
      "app/(use-page-wrapper)/(main-nav)/ShellMainAppDirBackButton.tsx",
      "app/(use-page-wrapper)/(main-nav)/availability/actions.ts",
      "app/(use-page-wrapper)/(main-nav)/availability/error.tsx",
      "app/(use-page-wrapper)/(main-nav)/availability/loading.tsx",
      "app/(use-page-wrapper)/(main-nav)/availability/page.tsx",
      "app/(use-page-wrapper)/(main-nav)/availability/skeleton.tsx",
      "app/(use-page-wrapper)/(main-nav)/bookings/[status]/page.tsx",
      "app/(use-page-wrapper)/(main-nav)/event-types/actions.ts",
      "app/(use-page-wrapper)/(main-nav)/event-types/error.tsx",
      "app/(use-page-wrapper)/(main-nav)/event-types/loading.tsx",
      "app/(use-page-wrapper)/(main-nav)/event-types/page.tsx",
      "app/(use-page-wrapper)/(main-nav)/event-types/skeleton.tsx",
      "app/(use-page-wrapper)/(main-nav)/layout.tsx",
      "app/(use-page-wrapper)/(main-nav)/teams/CTA.tsx",
      "app/(use-page-wrapper)/(main-nav)/teams/actions.ts",
      "app/(use-page-wrapper)/(main-nav)/teams/loading.tsx",
      "app/(use-page-wrapper)/(main-nav)/teams/page.tsx",
      "app/(use-page-wrapper)/(main-nav)/teams/server-page.tsx",
      "app/(use-page-wrapper)/(main-nav)/teams/skeleton.tsx",
      "app/(use-page-wrapper)/apps/(homepage)/loading.tsx",
      "app/(use-page-wrapper)/apps/(homepage)/page.tsx",
      "app/(use-page-wrapper)/apps/(homepage)/skeleton.tsx",
      "app/(use-page-wrapper)/apps/[slug]/page.tsx",
      "app/(use-page-wrapper)/apps/[slug]/setup/page.tsx",
      "app/(use-page-wrapper)/apps/categories/[category]/page.tsx",
      "app/(use-page-wrapper)/apps/categories/layout.tsx",
      "app/(use-page-wrapper)/apps/categories/page.tsx",
      "app/(use-page-wrapper)/apps/installation/[[...step]]/page.tsx",
      "app/(use-page-wrapper)/apps/installed/[category]/page.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/FormEdit.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/FormProvider.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/IncompleteBooking.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/RouteBuilder.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/RoutingFormAuthGuard.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/RoutingLink.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/app-routing.client-config.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/layout.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/[...pages]/page.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/forms/[[...pages]]/Forms.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/forms/[[...pages]]/page.tsx",
      "app/(use-page-wrapper)/apps/routing-forms/forms/layout.tsx",
      "app/(use-page-wrapper)/auth/error/page.tsx",
      "app/(use-page-wrapper)/auth/forgot-password/[id]/page.tsx",
      "app/(use-page-wrapper)/auth/forgot-password/page.tsx",
      "app/(use-page-wrapper)/auth/login/page.tsx",
      "app/(use-page-wrapper)/auth/logout/page.tsx",
      "app/(use-page-wrapper)/auth/oauth2/authorize/page.tsx",
      "app/(use-page-wrapper)/auth/platform/authorize/page.tsx",
      "app/(use-page-wrapper)/auth/saml-idp/page.tsx",
      "app/(use-page-wrapper)/auth/setup/page.tsx",
      "app/(use-page-wrapper)/auth/signin/page.tsx",
      "app/(use-page-wrapper)/auth/sso/[provider]/page.tsx",
      "app/(use-page-wrapper)/auth/sso/direct/page.tsx",
      "app/(use-page-wrapper)/auth/verify-email-change/page.tsx",
      "app/(use-page-wrapper)/auth/verify-email/page.tsx",
      "app/(use-page-wrapper)/auth/verify/page.tsx",
      "app/(use-page-wrapper)/availability/[schedule]/actions.ts",
      "app/(use-page-wrapper)/availability/[schedule]/loading.tsx",
      "app/(use-page-wrapper)/availability/[schedule]/page.tsx",
      "app/(use-page-wrapper)/availability/[schedule]/skeleton.tsx",
      "app/(use-page-wrapper)/availability/troubleshoot/layout.tsx",
      "app/(use-page-wrapper)/availability/troubleshoot/page.tsx",
      "app/(use-page-wrapper)/connect-and-join/page.tsx",
      "app/(use-page-wrapper)/enterprise/page.tsx",
      "app/(use-page-wrapper)/event-types/[type]/actions.ts",
      "app/(use-page-wrapper)/event-types/[type]/error.tsx",
      "app/(use-page-wrapper)/event-types/[type]/loading.tsx",
      "app/(use-page-wrapper)/event-types/[type]/page.tsx",
      "app/(use-page-wrapper)/event-types/[type]/skeleton.tsx",
      "app/(use-page-wrapper)/getting-started/[[...step]]/page.tsx",
      "app/(use-page-wrapper)/insights/UpgradeTipWrapper.tsx",
      "app/(use-page-wrapper)/insights/call-history/page.tsx",
      "app/(use-page-wrapper)/insights/checkInsightsPagePermission.ts",
      "app/(use-page-wrapper)/insights/layout.tsx",
      "app/(use-page-wrapper)/insights/page.tsx",
      "app/(use-page-wrapper)/insights/router-position/page.tsx",
      "app/(use-page-wrapper)/insights/routing/page.tsx",
      "app/(use-page-wrapper)/layout.tsx",
      "app/(use-page-wrapper)/maintenance/page.tsx",
      "app/(use-page-wrapper)/more/page.tsx",
      "app/(use-page-wrapper)/payment/[uid]/PaymentPage.tsx",
      "app/(use-page-wrapper)/payment/[uid]/page.tsx",
      "app/(use-page-wrapper)/refer/DubReferralsPage.tsx",
      "app/(use-page-wrapper)/refer/loading.tsx",
      "app/(use-page-wrapper)/refer/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/AdminLayoutAppDirClient.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/apps/[category]/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/flags/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/impersonation/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/lockedSMS/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/oAuth/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/organizations/[id]/edit/error.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/organizations/[id]/edit/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/organizations/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/bookings-by-hour/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/layout.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/playground/routing-funnel/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/users/[id]/edit/error.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/users/[id]/edit/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/users/add/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/users/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/admin/workspace-platforms/page.tsx",
      "app/(use-page-wrapper)/settings/(admin-layout)/layout.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/SettingsLayoutAppDirClient.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/billing/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/api-keys/actions.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/api-keys/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/api-keys/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/(with-loader)/actions.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/(with-loader)/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/(with-loader)/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/[id]/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/new/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/developer/webhooks/new/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/layout.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/appearance/actions.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/appearance/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/appearance/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/calendars/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/calendars/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/conferencing/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/conferencing/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/general/actions.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/general/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/general/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/out-of-office/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/profile/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/profile/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/my-account/push-notifications/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/[id]/edit/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/create/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/attributes/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/billing/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/delegation-credential/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/dsync/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/layout.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/privacy/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/(org-admin-only)/sso/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/actions/validateUserHasOrg.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/actions/validateUserHasOrgAdmin.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/actions/validateUserHasOrgPerms.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/admin-api/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/general/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/layout.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/profile/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/AdvancedPermissionGroup.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/CreateRoleCta.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/DeleteRoleModal.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/RoleColorPicker.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/RoleSheet.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/RolesList.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/RolesSkeletonLoader.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/SimplePermissionItem.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/searchParams.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/_components/usePermissions.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/actions.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/hooks/useRoleQueryStates.ts",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/roles/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/(main-page)/loading.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/(main-page)/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/(main-page)/skeleton.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/[id]/appearance/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/[id]/members/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/organizations/teams/other/[id]/profile/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/security/impersonation/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/security/password/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/security/sso/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/security/two-factor-auth/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/appearance/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/billing/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/members/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/profile/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/roles/page.tsx",
      "app/(use-page-wrapper)/settings/(settings-layout)/teams/[id]/settings/page.tsx",
      "app/(use-page-wrapper)/settings/license-key/new/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-admin-only)/appearance/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-admin-only)/layout.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/[id]/members/layout.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/[id]/members/loading.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/[id]/members/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/layout.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/members/actions.ts",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/members/layout.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/members/loading.tsx",
      "app/(use-page-wrapper)/settings/organizations/(org-user-only)/members/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/new/about/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/new/add-teams/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/new/handover/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/new/layout.tsx",
      "app/(use-page-wrapper)/settings/organizations/new/onboard-members/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/new/page.tsx",
      "app/(use-page-wrapper)/settings/organizations/new/status/page.tsx",
      "app/(use-page-wrapper)/settings/platform/billing/page.tsx",
      "app/(use-page-wrapper)/settings/platform/managed-users/page.tsx",
      "app/(use-page-wrapper)/settings/platform/members/layout.tsx",
      "app/(use-page-wrapper)/settings/platform/members/loading.tsx",
      "app/(use-page-wrapper)/settings/platform/members/page.tsx",
      "app/(use-page-wrapper)/settings/platform/new/page.tsx",
      "app/(use-page-wrapper)/settings/platform/oauth-clients/[clientId]/edit/page.tsx",
      "app/(use-page-wrapper)/settings/platform/oauth-clients/[clientId]/edit/webhooks/page.tsx",
      "app/(use-page-wrapper)/settings/platform/oauth-clients/create/page.tsx",
      "app/(use-page-wrapper)/settings/platform/page.tsx",
      "app/(use-page-wrapper)/settings/platform/plans/page.tsx",
      "app/(use-page-wrapper)/settings/teams/[id]/event-type/page.tsx",
      "app/(use-page-wrapper)/settings/teams/[id]/onboard-members/page.tsx",
      "app/(use-page-wrapper)/settings/teams/new/page.tsx",
      "app/(use-page-wrapper)/signup/page.tsx",
      "app/(use-page-wrapper)/upgrade/page.tsx",
      "app/(use-page-wrapper)/video/[uid]/page.tsx",
      "app/(use-page-wrapper)/video/meeting-ended/[uid]/page.tsx",
      "app/(use-page-wrapper)/video/meeting-not-started/[uid]/page.tsx",
      "app/(use-page-wrapper)/video/no-meeting-found/page.tsx",
      "app/(use-page-wrapper)/workflow/new/page.tsx",
      "app/(use-page-wrapper)/workflows/[workflow]/error.tsx",
      "app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
      "app/(use-page-wrapper)/workflows/layout.tsx",
      "app/(use-page-wrapper)/workflows/page.tsx",
      "app/AppRouterI18nProvider.tsx",
      "app/CustomI18nProvider.tsx",
      "app/SpeculationRules.tsx",
      "app/WithAppDirSsr.tsx",
      "app/WithEmbedSSR.tsx",
      "app/_trpc/context.ts",
      "app/_trpc/query-client.ts",
      "app/_trpc/trpc-client.ts",
      "app/_trpc/trpc-provider.tsx",
      "app/_trpc/trpc.ts",
      "app/_types.ts",
      "app/_utils.tsx",
      "app/api/auth/forgot-password/route.ts",
      "app/api/auth/oauth/me/route.ts",
      "app/api/auth/oauth/refreshToken/route.ts",
      "app/api/auth/oauth/token/route.ts",
      "app/api/auth/oidc/route.ts",
      "app/api/auth/reset-password/route.ts",
      "app/api/auth/saml/authorize/route.ts",
      "app/api/auth/saml/callback/route.ts",
      "app/api/auth/saml/token/route.ts",
      "app/api/auth/saml/userinfo/route.ts",
      "app/api/auth/setup/route.ts",
      "app/api/auth/signup/route.ts",
      "app/api/auth/two-factor/totp/disable/route.ts",
      "app/api/auth/two-factor/totp/enable/route.ts",
      "app/api/auth/two-factor/totp/setup/route.ts",
      "app/api/availability/calendar/route.ts",
      "app/api/avatar/[uuid]/route.ts",
      "app/api/calAIPhone/subscription/success/route.ts",
      "app/api/cancel/route.ts",
      "app/api/cron/bookingReminder/route.ts",
      "app/api/cron/calendar-cache-cleanup/route.ts",
      "app/api/cron/calendar-subscriptions-cleanup/route.ts",
      "app/api/cron/calendar-subscriptions/route.ts",
      "app/api/cron/changeTimeZone/route.ts",
      "app/api/cron/checkSmsPrices/route.ts",
      "app/api/cron/credentials/route.ts",
      "app/api/cron/downgradeUsers/route.ts",
      "app/api/cron/monthlyDigestEmail/route.ts",
      "app/api/cron/queuedFormResponseCleanup/route.ts",
      "app/api/cron/selected-calendars/route.ts",
      "app/api/cron/syncAppMeta/route.ts",
      "app/api/cron/webhookTriggers/route.ts",
      "app/api/cron/workflows/scheduleEmailReminders/route.ts",
      "app/api/cron/workflows/scheduleSMSReminders/route.ts",
      "app/api/cron/workflows/scheduleWhatsappReminders/route.ts",
      "app/api/csrf/route.ts",
      "app/api/defaultResponderForAppDir.ts",
      "app/api/email/route.ts",
      "app/api/geolocation/route.ts",
      "app/api/link/route.ts",
      "app/api/logo/route.ts",
      "app/api/me/route.ts",
      "app/api/parseRequestData.ts",
      "app/api/recorded-daily-video/route.ts",
      "app/api/routing-forms/queued-response/route.ts",
      "app/api/scim/v2.0/[...directory]/route.ts",
      "app/api/social/og/image/route.tsx",
      "app/api/support/conversation/route.ts",
      "app/api/support/hash/route.ts",
      "app/api/sync/helpscout/route.ts",
      "app/api/tasks/cleanup/route.ts",
      "app/api/tasks/cron/route.ts",
      "app/api/teams/[team]/upgrade/route.ts",
      "app/api/teams/api/create/route.ts",
      "app/api/teams/create/route.ts",
      "app/api/teams/googleworkspace/add/route.ts",
      "app/api/teams/googleworkspace/callback/route.ts",
      "app/api/user/referrals-token/route.ts",
      "app/api/username/route.ts",
      "app/api/verify-booking-token/route.ts",
      "app/api/version/route.ts",
      "app/api/video/recording/route.ts",
      "app/api/webhook/app-credential/route.ts",
      "app/api/webhooks/calendar-subscription/[provider]/route.ts",
      "app/api/webhooks/retell-ai/route.ts",
      "app/api/workflows/sms/user-response/route.ts",
      "app/cache/membership.ts",
      "app/cache/path/settings/my-account/index.ts",
      "app/cache/travelSchedule.ts",
      "app/error.tsx",
      "app/global-error.tsx",
      "app/icons/IconGrid.tsx",
      "app/icons/page.tsx",
      "app/layout.tsx",
      "app/not-found.tsx",
      "app/notFoundClient.tsx",
      "app/page.tsx",
      "app/providers.tsx",
      "app/reschedule/[uid]/embed/page.tsx",
      "app/reschedule/[uid]/page.tsx",
      "app/routing-forms/[...pages]/page.tsx",
      "components/AddToHomescreen.tsx",
      "components/EnterprisePage.tsx",
      "components/GTM.tsx",
      "components/I18nLanguageHandler.tsx",
      "components/Loader.tsx",
      "components/PageWrapper.tsx",
      "components/PageWrapperAppDir.tsx",
      "components/apps/App.tsx",
      "components/apps/AppPage.tsx",
      "components/apps/AppSetupPage.tsx",
      "components/apps/CalendarListContainer.tsx",
      "components/apps/InstallAppButtonChild.tsx",
      "components/apps/MultiDisconnectIntegration.tsx",
      "components/apps/alby/AlbyPaymentComponent.tsx",
      "components/apps/alby/Setup.tsx",
      "components/apps/applecalendar/Setup.tsx",
      "components/apps/btcpayserver/BtcpayPaymentComponent.tsx",
      "components/apps/btcpayserver/Setup.tsx",
      "components/apps/caldavcalendar/Setup.tsx",
      "components/apps/exchange2013calendar/Setup.tsx",
      "components/apps/exchange2016calendar/Setup.tsx",
      "components/apps/exchangecalendar/Setup.tsx",
      "components/apps/hitpay/HitpayPaymentComponent.tsx",
      "components/apps/hitpay/Setup.tsx",
      "components/apps/ics-feedcalendar/Setup.tsx",
      "components/apps/installation/AccountsStepCard.tsx",
      "components/apps/installation/ConfigureStepCard.tsx",
      "components/apps/installation/EventTypeAppSettingsWrapper.tsx",
      "components/apps/installation/EventTypeConferencingAppSettings.tsx",
      "components/apps/installation/EventTypesStepCard.tsx",
      "components/apps/installation/StepHeader.tsx",
      "components/apps/layouts/AppsLayout.tsx",
      "components/apps/layouts/InstalledAppsLayout.tsx",
      "components/apps/make/Setup.tsx",
      "components/apps/paypal/PaypalPaymentComponent.tsx",
      "components/apps/paypal/Setup.tsx",
      "components/apps/routing-forms/FormActions.tsx",
      "components/apps/routing-forms/FormSettingsSlideover.tsx",
      "components/apps/routing-forms/Header.tsx",
      "components/apps/routing-forms/SingleForm.tsx",
      "components/apps/routing-forms/TestForm.tsx",
      "components/apps/sendgrid/Setup.tsx",
      "components/apps/stripepayment/Setup.tsx",
      "components/apps/wipemycalother/confirmDialog.tsx",
      "components/apps/wipemycalother/wipeMyCalActionButton.tsx",
      "components/apps/zapier/Setup.tsx",
      "components/auth/BackupCode.tsx",
      "components/auth/TwoFactor.tsx",
      "components/booking/BookingListItem.tsx",
      "components/booking/CancelBooking.tsx",
      "components/booking/SkeletonLoader.tsx",
      "components/booking/bookingActions.ts",
      "components/dialog/AddGuestsDialog.tsx",
      "components/dialog/ChargeCardDialog.tsx",
      "components/dialog/EditLocationDialog.tsx",
      "components/dialog/ReassignDialog.tsx",
      "components/dialog/RerouteDialog.tsx",
      "components/dialog/RescheduleDialog.tsx",
      "components/error/BookingPageErrorBoundary.tsx",
      "components/error/error-page.tsx",
      "components/eventtype/EventTypeDescriptionSafeHTML.tsx",
      "components/getting-started/components/AppConnectionItem.tsx",
      "components/getting-started/components/ConnectedCalendarItem.tsx",
      "components/getting-started/components/CreateEventsOnCalendarSelect.tsx",
      "components/getting-started/components/StepConnectionLoader.tsx",
      "components/getting-started/steps-views/ConnectCalendars.tsx",
      "components/getting-started/steps-views/ConnectedVideoStep.tsx",
      "components/getting-started/steps-views/SetupAvailability.tsx",
      "components/getting-started/steps-views/UserProfile.tsx",
      "components/getting-started/steps-views/UserSettings.tsx",
      "components/integrations/SubHeadingTitleWithConnections.tsx",
      "components/notification-sound-handler.tsx",
      "components/schemas/EventReservationSchema.tsx",
      "components/security/DisableTwoFactorModal.tsx",
      "components/security/DisableUserImpersonation.tsx",
      "components/security/EnableTwoFactorModal.tsx",
      "components/security/TwoFactorAuthAPI.ts",
      "components/security/TwoFactorAuthSection.tsx",
      "components/security/TwoFactorModalHeader.tsx",
      "components/settings/CustomEmailTextField.tsx",
      "components/settings/DisableTwoFactorModal.tsx",
      "components/settings/EnableTwoFactorModal.tsx",
      "components/settings/SecondaryEmailConfirmModal.tsx",
      "components/settings/SecondaryEmailModal.tsx",
      "components/settings/TravelScheduleModal.tsx",
      "components/settings/TwoFactorAuthAPI.ts",
      "components/settings/admin/RecentImpersonationsList.tsx",
      "components/settings/platform/dashboard/HelpCards.tsx",
      "components/settings/platform/dashboard/NoPlatformPlan.tsx",
      "components/settings/platform/dashboard/oauth-clients-list/index.tsx",
      "components/settings/platform/hooks/useGetUserAttributes.ts",
      "components/settings/platform/hooks/usePlatformMe.ts",
      "components/settings/platform/oauth-clients/OAuthClientCard.tsx",
      "components/settings/platform/oauth-clients/oauth-client-form/index.tsx",
      "components/settings/platform/platformUtils.ts",
      "components/settings/platform/pricing/billing-card/index.tsx",
      "components/settings/platform/pricing/platform-pricing/index.tsx",
      "components/setup/AdminUser.tsx",
      "components/setup/ChooseLicense.tsx",
      "components/setup/EnterpriseLicense.tsx",
      "components/setup/LicenseSelection.tsx",
      "components/setup/StepDone.tsx",
      "components/team/screens/Team.tsx",
      "components/ui/AuthContainer.tsx",
      "components/ui/LinkIconButton.tsx",
      "components/ui/ModalContainer.tsx",
      "components/ui/SettingInputContainer.tsx",
      "components/ui/UsernameAvailability/PremiumTextfield.tsx",
      "components/ui/UsernameAvailability/UsernameTextfield.tsx",
      "components/ui/UsernameAvailability/index.tsx",
      "components/ui/form/CheckedSelect.tsx",
      "components/ui/form/DatePicker.tsx",
      "components/ui/form/MinutesField.tsx",
      "cron-tester.ts",
      "getNextjsOrgRewriteConfig.js",
      "instrumentation-client.ts",
      "instrumentation.ts",
      "lib/QueryCell.tsx",
      "lib/app-providers-app-dir.tsx",
      "lib/app-providers.tsx",
      "lib/apps/[slug]/getStaticProps.ts",
      "lib/apps/categories/[category]/getStaticProps.ts",
      "lib/apps/categories/getServerSideProps.ts",
      "lib/apps/installation/[[...step]]/getServerSideProps.ts",
      "lib/apps/routing-forms/[...pages]/app-routing.server-config.tsx",
      "lib/apps/routing-forms/[...pages]/getServerSideProps.ts",
      "lib/apps/routing-forms/[...pages]/getServerSidePropsRoutingLink.ts",
      "lib/apps/routing-forms/[...pages]/getServerSidePropsSingleForm.ts",
      "lib/asStringOrNull.tsx",
      "lib/booking.ts",
      "lib/booking/assignmentReasonBadgeTitleMap.ts",
      "lib/buildLegacyCtx.ts",
      "lib/buildNonce.ts",
      "lib/clock.ts",
      "lib/config/next-seo.config.ts",
      "lib/core/http/error/http-error.ts",
      "lib/core/http/error/index.ts",
      "lib/cropImage.ts",
      "lib/csp.ts",
      "lib/d/[link]/[slug]/getServerSideProps.tsx",
      "lib/daily-webhook/getBooking.ts",
      "lib/daily-webhook/getBookingReference.ts",
      "lib/daily-webhook/getCalendarEvent.ts",
      "lib/daily-webhook/schema.ts",
      "lib/daily-webhook/triggerWebhooks.ts",
      "lib/ensureArray.ts",
      "lib/getQuery.ts",
      "lib/getThemeProviderProps.ts",
      "lib/handleOrgRedirect.ts",
      "lib/hasKeyInMetadata.ts",
      "lib/hooks/settings/platform/billing/useCheckTeamBilling.ts",
      "lib/hooks/settings/platform/billing/useExternalRedirectHandler.ts",
      "lib/hooks/settings/platform/billing/useSubscribeTeamToStripe.ts",
      "lib/hooks/settings/platform/billing/useUnsubscribeTeamToStripe.ts",
      "lib/hooks/settings/platform/billing/useUpgradeTeamSubscriptionInStripe.ts",
      "lib/hooks/settings/platform/oauth-clients/useCreateOAuthClient.ts",
      "lib/hooks/settings/platform/oauth-clients/useDeleteOAuthClient.ts",
      "lib/hooks/settings/platform/oauth-clients/useOAuthClient.ts",
      "lib/hooks/settings/platform/oauth-clients/useOAuthClientWebhooks.ts",
      "lib/hooks/settings/platform/oauth-clients/useOAuthClients.ts",
      "lib/hooks/settings/platform/oauth-clients/usePersistOAuthClient.ts",
      "lib/hooks/settings/platform/oauth-clients/useUpdateOAuthClient.ts",
      "lib/hooks/useCurrentUserId.ts",
      "lib/hooks/useFileReader.ts",
      "lib/hooks/useIsBookingPage.ts",
      "lib/hooks/useIsThemeSupported.ts",
      "lib/hooks/useMediaQuery.ts",
      "lib/hooks/useRouterQuery.ts",
      "lib/hooks/useToggleQuery.tsx",
      "lib/isBrandingHidden.tsx",
      "lib/isPrismaObj.ts",
      "lib/org/[orgSlug]/[user]/[type]/getServerSideProps.tsx",
      "lib/org/[orgSlug]/[user]/getServerSideProps.tsx",
      "lib/org/[orgSlug]/instant-meeting/team/[slug]/[type]/getServerSideProps.ts",
      "lib/pages/auth/verify-email.ts",
      "lib/pages/document/_applyThemeForDocument.ts",
      "lib/reschedule/[uid]/getServerSideProps.ts",
      "lib/settings/license-key/new/getServerSideProps.tsx",
      "lib/settings/platform/utils.ts",
      "lib/signup/getServerSideProps.tsx",
      "lib/team/[slug]/[type]/getServerSideProps.tsx",
      "lib/team/[slug]/getServerSideProps.tsx",
      "lib/types/booking.ts",
      "lib/types/inferSSRProps.ts",
      "lib/types/schedule.ts",
      "lib/video/[uid]/getServerSideProps.ts",
      "lib/video/meeting-ended/[uid]/getServerSideProps.ts",
      "lib/video/meeting-not-started/[uid]/getServerSideProps.ts",
      "lib/withEmbedSsr.ts",
      "lib/withLocale.tsx",
      "middleware.test.ts",
      "middleware.ts",
      "modules/apps/[slug]/setup/setup-view.tsx",
      "modules/apps/[slug]/slug-view.tsx",
      "modules/apps/apps-view.tsx",
      "modules/apps/categories/[category]/category-view.tsx",
      "modules/apps/categories/categories-view.tsx",
      "modules/apps/installation/[[...step]]/constants.ts",
      "modules/apps/installation/[[...step]]/step-view.tsx",
      "modules/apps/installed/[category]/installed-category-view.tsx",
      "modules/auth/forgot-password/[id]/forgot-password-single-view.tsx",
      "modules/auth/forgot-password/forgot-password-view.tsx",
      "modules/auth/login-view.tsx",
      "modules/auth/logout-view.tsx",
      "modules/auth/oauth2/authorize-view.tsx",
      "modules/auth/platform/authorize-view.tsx",
      "modules/auth/saml-idp/saml-idp-view.tsx",
      "modules/auth/setup-view.tsx",
      "modules/auth/signin-view.tsx",
      "modules/auth/sso/direct-view.tsx",
      "modules/auth/sso/provider-view.tsx",
      "modules/auth/verify-email-change-view.tsx",
      "modules/auth/verify-email-view.tsx",
      "modules/auth/verify-view.tsx",
      "modules/availability/[schedule]/schedule-view.tsx",
      "modules/availability/availability-view.tsx",
      "modules/availability/troubleshoot/troubleshoot-view.tsx",
      "modules/bookings/hooks/useEventTypes.ts",
      "modules/bookings/hooks/useFacetedUniqueValues.ts",
      "modules/bookings/lib/validStatuses.ts",
      "modules/bookings/views/booking-dry-run-success-view.tsx",
      "modules/bookings/views/bookings-listing-view.tsx",
      "modules/bookings/views/bookings-single-view.getServerSideProps.tsx",
      "modules/bookings/views/bookings-single-view.tsx",
      "modules/connect-and-join/connect-and-join-view.tsx",
      "modules/d/[link]/d-type-view.tsx",
      "modules/event-types/views/event-types-listing-view.tsx",
      "modules/getting-started/[[...step]]/onboarding-view.tsx",
      "modules/insights/insights-call-history-view.tsx",
      "modules/insights/insights-routing-view.tsx",
      "modules/insights/insights-view.tsx",
      "modules/insights/insights-virtual-queues-view.tsx",
      "modules/maintenance/maintenance-view.tsx",
      "modules/members/members-view.tsx",
      "modules/more/more-page-view.tsx",
      "modules/org/[orgSlug]/instant-meeting/team/[slug]/[type]/instant-meeting-view.tsx",
      "modules/settings/admin/components/UsersTable.tsx",
      "modules/settings/admin/impersonation-view.tsx",
      "modules/settings/admin/locked-sms-view.tsx",
      "modules/settings/admin/oauth-view.tsx",
      "modules/settings/billing/billing-view.tsx",
      "modules/settings/billing/components/BillingCredits.tsx",
      "modules/settings/billing/components/BillingCreditsSkeleton.tsx",
      "modules/settings/developer/api-keys-skeleton.tsx",
      "modules/settings/developer/api-keys-view.tsx",
      "modules/settings/license-key/new/new-view.tsx",
      "modules/settings/my-account/appearance-skeleton.tsx",
      "modules/settings/my-account/appearance-view.tsx",
      "modules/settings/my-account/components/AddCalendarButton.tsx",
      "modules/settings/my-account/general-skeleton.tsx",
      "modules/settings/my-account/general-view.tsx",
      "modules/settings/my-account/profile-skeleton.tsx",
      "modules/settings/my-account/profile-view.tsx",
      "modules/settings/my-account/push-notifications-view.tsx",
      "modules/settings/organizations/new/_components/AddNewTeamsForm.tsx",
      "modules/settings/organizations/new/_components/OnboardMembersView.tsx",
      "modules/settings/organizations/new/_components/PaymentStatusView.tsx",
      "modules/settings/organizations/new/about-view.tsx",
      "modules/settings/organizations/new/add-teams-view.tsx",
      "modules/settings/organizations/new/create-new-view.tsx",
      "modules/settings/organizations/new/onboard-members-view.tsx",
      "modules/settings/organizations/new/onboarding-handover.tsx",
      "modules/settings/organizations/new/payment-status-view.tsx",
      "modules/settings/platform/billing/billing-view.tsx",
      "modules/settings/platform/managed-users/managed-users-view.tsx",
      "modules/settings/platform/new/create-new-view.tsx",
      "modules/settings/platform/oauth-clients/[clientId]/edit/edit-view.tsx",
      "modules/settings/platform/oauth-clients/[clientId]/edit/edit-webhooks-view.tsx",
      "modules/settings/platform/oauth-clients/create-new-view.tsx",
      "modules/settings/platform/plans/platform-plans-view.tsx",
      "modules/settings/platform/platform-view.tsx",
      "modules/settings/security/impersonation-view.tsx",
      "modules/settings/security/password-view.tsx",
      "modules/settings/security/two-factor-auth-view.tsx",
      "modules/settings/teams/[id]/event-types-view.tsx",
      "modules/settings/teams/[id]/onboard-members-view.tsx",
      "modules/settings/teams/new/create-new-team-view.tsx",
      "modules/signup-view.tsx",
      "modules/team/team-view.tsx",
      "modules/team/type-view-cached.tsx",
      "modules/team/type-view.tsx",
      "modules/teams/team-members-view.tsx",
      "modules/test-setup.ts",
      "modules/upgrade/upgrade-view.tsx",
      "modules/users/views/users-public-view.tsx",
      "modules/users/views/users-type-public-view.tsx",
      "modules/videos/button-states.ts",
      "modules/videos/cal-video-premium-features.tsx",
      "modules/videos/views/videos-meeting-ended-single-view.tsx",
      "modules/videos/views/videos-meeting-not-started-single-view.tsx",
      "modules/videos/views/videos-no-meeting-found-single-view.tsx",
      "modules/videos/views/videos-single-view.tsx",
      "next-i18next.config.js",
      "next.config.js",
      "pages/_app.tsx",
      "pages/_document.tsx",
      "pages/_error.tsx",
      "pages/api/auth/[...nextauth].ts",
      "pages/api/auth/verify-email.ts",
      "pages/api/book/event.ts",
      "pages/api/book/instant-event.ts",
      "pages/api/book/recurring-event.ts",
      "pages/api/calendar-cache/cron.ts",
      "pages/api/collect-events.ts",
      "pages/api/get-inbound-dynamic-variables.ts",
      "pages/api/integrations/[...args].ts",
      "pages/api/integrations/alby/webhook.ts",
      "pages/api/integrations/btcpayserver/webhook.ts",
      "pages/api/integrations/paypal/webhook.ts",
      "pages/api/integrations/stripepayment/webhook.ts",
      "pages/api/integrations/subscriptions/webhook.ts",
      "pages/api/organizations/[org]/subteams.ts",
      "pages/api/router/index.ts",
      "pages/api/stripe/webhook.ts",
      "pages/api/trpc/admin/[trpc].ts",
      "pages/api/trpc/aiVoiceAgent/[trpc].ts",
      "pages/api/trpc/apiKeys/[trpc].ts",
      "pages/api/trpc/appRoutingForms/[trpc].ts",
      "pages/api/trpc/apps/[trpc].ts",
      "pages/api/trpc/appsRouter/[trpc].ts",
      "pages/api/trpc/attributes/[trpc].ts",
      "pages/api/trpc/auth/[trpc].ts",
      "pages/api/trpc/availability/[trpc].ts",
      "pages/api/trpc/bookings/[trpc].ts",
      "pages/api/trpc/calVideo/[trpc].ts",
      "pages/api/trpc/calendars/[trpc].ts",
      "pages/api/trpc/credentials/[trpc].ts",
      "pages/api/trpc/credits/[trpc].ts",
      "pages/api/trpc/delegationCredential/[trpc].ts",
      "pages/api/trpc/deploymentSetup/[trpc].ts",
      "pages/api/trpc/dsync/[trpc].ts",
      "pages/api/trpc/eventTypes/[trpc].ts",
      "pages/api/trpc/eventTypes/heavy/[trpc].ts",
      "pages/api/trpc/features/[trpc].ts",
      "pages/api/trpc/filterSegments/[trpc].ts",
      "pages/api/trpc/googleWorkspace/[trpc].ts",
      "pages/api/trpc/i18n/[trpc].ts",
      "pages/api/trpc/insights/[trpc].ts",
      "pages/api/trpc/loggedInViewerRouter/[trpc].ts",
      "pages/api/trpc/me/[trpc].ts",
      "pages/api/trpc/oAuth/[trpc].ts",
      "pages/api/trpc/ooo/[trpc].ts",
      "pages/api/trpc/organizations/[trpc].ts",
      "pages/api/trpc/payments/[trpc].ts",
      "pages/api/trpc/pbac/[trpc].ts",
      "pages/api/trpc/phoneNumber/[trpc].ts",
      "pages/api/trpc/routingForms/[trpc].ts",
      "pages/api/trpc/saml/[trpc].ts",
      "pages/api/trpc/slots/[trpc].ts",
      "pages/api/trpc/teams/[trpc].ts",
      "pages/api/trpc/timezones/[trpc].ts",
      "pages/api/trpc/travelSchedules/[trpc].ts",
      "pages/api/trpc/users/[trpc].ts",
      "pages/api/trpc/viewer/[trpc].ts",
      "pages/api/trpc/webhook/[trpc].ts",
      "pages/api/trpc/workflows/[trpc].ts",
      "pages/api/twilio/webhook.ts",
      "pages/router/embed.tsx",
      "pages/router/index.tsx",
      "pagesAndRewritePaths.js",
      "playwright/ab-tests-redirect.e2e.ts",
      "playwright/admin-users.e2e.ts",
      "playwright/app-list-card.e2e.ts",
      "playwright/app-router-not-found.e2e.ts",
      "playwright/app-store.e2e.ts",
      "playwright/apple-calendar.e2e.ts",
      "playwright/apps/analytics/analyticsApps.e2e.ts",
      "playwright/apps/conferencing/conferencingApps.e2e.ts",
      "playwright/apps/conferencing/types.ts",
      "playwright/auth/auth-index.e2e.ts",
      "playwright/auth/delete-account.e2e.ts",
      "playwright/auth/forgot-password.e2e.ts",
      "playwright/availability.e2e.ts",
      "playwright/booking-duplicate-api-calls.e2e.ts",
      "playwright/booking-filters.e2e.ts",
      "playwright/booking-limits.e2e.ts",
      "playwright/booking-pages.e2e.ts",
      "playwright/booking-race-condition.e2e.ts",
      "playwright/booking-seats.e2e.ts",
      "playwright/bookings-list.e2e.ts",
      "playwright/buy-credits.e2e.ts",
      "playwright/cancellation-fee-warning.e2e.ts",
      "playwright/change-password.e2e.ts",
      "playwright/change-theme.e2e.ts",
      "playwright/change-username.e2e.ts",
      "playwright/dynamic-booking-pages.e2e.ts",
      "playwright/embed-code-generator.e2e.ts",
      "playwright/event-types.e2e.ts",
      "playwright/eventType/ai-translation.e2e.ts",
      "playwright/eventType/availability-tab.e2e.ts",
      "playwright/eventType/limit-tab.e2e.ts",
      "playwright/filter-helpers.ts",
      "playwright/filter-segment.e2e.ts",
      "playwright/fixtures/apps.ts",
      "playwright/fixtures/bookings.ts",
      "playwright/fixtures/emails.ts",
      "playwright/fixtures/embeds.ts",
      "playwright/fixtures/eventTypes.ts",
      "playwright/fixtures/features.ts",
      "playwright/fixtures/orgs.ts",
      "playwright/fixtures/payments.ts",
      "playwright/fixtures/regularBookings.ts",
      "playwright/fixtures/routingForms.ts",
      "playwright/fixtures/servers.ts",
      "playwright/fixtures/types.ts",
      "playwright/fixtures/users.ts",
      "playwright/fixtures/webhooks.ts",
      "playwright/fixtures/workflows.ts",
      "playwright/hash-my-url.e2e.ts",
      "playwright/i18n-routing.e2e.ts",
      "playwright/icons.e2e.ts",
      "playwright/impersonation.e2e.ts",
      "playwright/insights-routing-filters.e2e.ts",
      "playwright/insights-routing.e2e.ts",
      "playwright/insights.e2e.ts",
      "playwright/integrations-stripe.e2e.ts",
      "playwright/integrations.e2e.ts",
      "playwright/lib/fixtures.ts",
      "playwright/lib/loadJSON.ts",
      "playwright/lib/localize.ts",
      "playwright/lib/next-server.ts",
      "playwright/lib/orgMigration.ts",
      "playwright/lib/pageObject.ts",
      "playwright/lib/teardown.ts",
      "playwright/lib/test-helpers/organizationHelpers.ts",
      "playwright/lib/test-helpers/pbac.ts",
      "playwright/lib/test-helpers/routingFormHelpers.ts",
      "playwright/lib/test-helpers/teamHelpers.ts",
      "playwright/lib/testUtils.ts",
      "playwright/locale.e2e.ts",
      "playwright/login.2fa.e2e.ts",
      "playwright/login.api.e2e.ts",
      "playwright/login.e2e.ts",
      "playwright/login.oauth.e2e.ts",
      "playwright/manage-booking-questions.e2e.ts",
      "playwright/managed-event-types.e2e.ts",
      "playwright/oauth-provider.e2e.ts",
      "playwright/oidc.e2e.ts",
      "playwright/onboarding.e2e.ts",
      "playwright/organization/across-org/across-org.e2e.ts",
      "playwright/organization/booking.e2e.ts",
      "playwright/organization/expects.ts",
      "playwright/organization/lib/gotoPathAndExpectRedirectToOrgDomain.ts",
      "playwright/organization/lib/inviteUser.ts",
      "playwright/organization/organization-creation.e2e.ts",
      "playwright/organization/organization-invitation.e2e.ts",
      "playwright/organization/organization-privacy.e2e.ts",
      "playwright/organization/organization-redirection.e2e.ts",
      "playwright/organization/organization-settings.e2e.ts",
      "playwright/organization/team-management.e2e.ts",
      "playwright/out-of-office.e2e.ts",
      "playwright/overlay-calendar.e2e.ts",
      "playwright/payment-apps.e2e.ts",
      "playwright/payment.e2e.ts",
      "playwright/profile.e2e.ts",
      "playwright/reschedule.e2e.ts",
      "playwright/saml.e2e.ts",
      "playwright/settings-admin.e2e.ts",
      "playwright/settings/upload-avatar.e2e.ts",
      "playwright/signup.e2e.ts",
      "playwright/system-segments.e2e.ts",
      "playwright/team-availability.e2e.ts",
      "playwright/team/expects.ts",
      "playwright/team/team-invitation.e2e.ts",
      "playwright/teams.e2e.ts",
      "playwright/trial.e2e.ts",
      "playwright/unpublished.e2e.ts",
      "playwright/webhook.e2e.ts",
      "playwright/wipe-my-cal.e2e.ts",
      "playwright/workflow.e2e.ts",
      "postcss.config.js",
      "sentry.edge.config.ts",
      "sentry.server.config.ts",
      "server/lib/[user]/[type]/getServerSideProps.ts",
      "server/lib/[user]/getServerSideProps.ts",
      "server/lib/auth/forgot-password/[id]/getServerSideProps.tsx",
      "server/lib/auth/login/getServerSideProps.tsx",
      "server/lib/auth/signin/getServerSideProps.tsx",
      "server/lib/auth/sso/[provider]/getServerSideProps.tsx",
      "server/lib/auth/sso/direct/getServerSideProps.tsx",
      "server/lib/auth/verify-email-change/getServerSideProps.tsx",
      "server/lib/constants.ts",
      "server/lib/router/getServerSideProps.ts",
      "server/lib/setup/getServerSideProps.tsx",
      "tailwind.config.js"
    ]
  }
}
